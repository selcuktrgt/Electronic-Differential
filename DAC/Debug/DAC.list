
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c9c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08005e50  08005e50  00015e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006088  08006088  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08006088  08006088  00016088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006090  08006090  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08006098  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          000001b4  20000030  20000030  00020030  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200001e4  200001e4  00020030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbcb  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000204a  00000000  00000000  0002fc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00031c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d80  00000000  00000000  00032ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025115  00000000  00000000  00033830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000100a4  00000000  00000000  00058945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e85b7  00000000  00000000  000689e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150fa0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004118  00000000  00000000  00150ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000030 	.word	0x20000030
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005e34 	.word	0x08005e34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000034 	.word	0x20000034
 80001ec:	08005e34 	.word	0x08005e34

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b974 	b.w	8000e2c <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	468e      	mov	lr, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14d      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4694      	mov	ip, r2
 8000b6e:	d969      	bls.n	8000c44 <__udivmoddi4+0xe8>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b152      	cbz	r2, 8000b8c <__udivmoddi4+0x30>
 8000b76:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7a:	f1c2 0120 	rsb	r1, r2, #32
 8000b7e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b82:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b86:	ea41 0e03 	orr.w	lr, r1, r3
 8000b8a:	4094      	lsls	r4, r2
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	0c21      	lsrs	r1, r4, #16
 8000b92:	fbbe f6f8 	udiv	r6, lr, r8
 8000b96:	fa1f f78c 	uxth.w	r7, ip
 8000b9a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ba2:	fb06 f107 	mul.w	r1, r6, r7
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bb2:	f080 811f 	bcs.w	8000df4 <__udivmoddi4+0x298>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 811c 	bls.w	8000df4 <__udivmoddi4+0x298>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb00 f707 	mul.w	r7, r0, r7
 8000bd4:	42a7      	cmp	r7, r4
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x92>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be0:	f080 810a 	bcs.w	8000df8 <__udivmoddi4+0x29c>
 8000be4:	42a7      	cmp	r7, r4
 8000be6:	f240 8107 	bls.w	8000df8 <__udivmoddi4+0x29c>
 8000bea:	4464      	add	r4, ip
 8000bec:	3802      	subs	r0, #2
 8000bee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bf2:	1be4      	subs	r4, r4, r7
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	b11d      	cbz	r5, 8000c00 <__udivmoddi4+0xa4>
 8000bf8:	40d4      	lsrs	r4, r2
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e9c5 4300 	strd	r4, r3, [r5]
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0xc2>
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	f000 80ef 	beq.w	8000dee <__udivmoddi4+0x292>
 8000c10:	2600      	movs	r6, #0
 8000c12:	e9c5 0100 	strd	r0, r1, [r5]
 8000c16:	4630      	mov	r0, r6
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fab3 f683 	clz	r6, r3
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d14a      	bne.n	8000cbc <__udivmoddi4+0x160>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d302      	bcc.n	8000c30 <__udivmoddi4+0xd4>
 8000c2a:	4282      	cmp	r2, r0
 8000c2c:	f200 80f9 	bhi.w	8000e22 <__udivmoddi4+0x2c6>
 8000c30:	1a84      	subs	r4, r0, r2
 8000c32:	eb61 0303 	sbc.w	r3, r1, r3
 8000c36:	2001      	movs	r0, #1
 8000c38:	469e      	mov	lr, r3
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d0e0      	beq.n	8000c00 <__udivmoddi4+0xa4>
 8000c3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c42:	e7dd      	b.n	8000c00 <__udivmoddi4+0xa4>
 8000c44:	b902      	cbnz	r2, 8000c48 <__udivmoddi4+0xec>
 8000c46:	deff      	udf	#255	; 0xff
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	f040 8092 	bne.w	8000d76 <__udivmoddi4+0x21a>
 8000c52:	eba1 010c 	sub.w	r1, r1, ip
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f fe8c 	uxth.w	lr, ip
 8000c5e:	2601      	movs	r6, #1
 8000c60:	0c20      	lsrs	r0, r4, #16
 8000c62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c66:	fb07 1113 	mls	r1, r7, r3, r1
 8000c6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c6e:	fb0e f003 	mul.w	r0, lr, r3
 8000c72:	4288      	cmp	r0, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x12c>
 8000c76:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x12a>
 8000c80:	4288      	cmp	r0, r1
 8000c82:	f200 80cb 	bhi.w	8000e1c <__udivmoddi4+0x2c0>
 8000c86:	4643      	mov	r3, r8
 8000c88:	1a09      	subs	r1, r1, r0
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c90:	fb07 1110 	mls	r1, r7, r0, r1
 8000c94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c98:	fb0e fe00 	mul.w	lr, lr, r0
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x156>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x154>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f200 80bb 	bhi.w	8000e26 <__udivmoddi4+0x2ca>
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	eba4 040e 	sub.w	r4, r4, lr
 8000cb6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cba:	e79c      	b.n	8000bf6 <__udivmoddi4+0x9a>
 8000cbc:	f1c6 0720 	rsb	r7, r6, #32
 8000cc0:	40b3      	lsls	r3, r6
 8000cc2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cc6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cca:	fa20 f407 	lsr.w	r4, r0, r7
 8000cce:	fa01 f306 	lsl.w	r3, r1, r6
 8000cd2:	431c      	orrs	r4, r3
 8000cd4:	40f9      	lsrs	r1, r7
 8000cd6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cda:	fa00 f306 	lsl.w	r3, r0, r6
 8000cde:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ce2:	0c20      	lsrs	r0, r4, #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cfa:	d90b      	bls.n	8000d14 <__udivmoddi4+0x1b8>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d04:	f080 8088 	bcs.w	8000e18 <__udivmoddi4+0x2bc>
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	f240 8085 	bls.w	8000e18 <__udivmoddi4+0x2bc>
 8000d0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d28:	458e      	cmp	lr, r1
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x1e2>
 8000d2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d30:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d34:	d26c      	bcs.n	8000e10 <__udivmoddi4+0x2b4>
 8000d36:	458e      	cmp	lr, r1
 8000d38:	d96a      	bls.n	8000e10 <__udivmoddi4+0x2b4>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	4461      	add	r1, ip
 8000d3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d42:	fba0 9402 	umull	r9, r4, r0, r2
 8000d46:	eba1 010e 	sub.w	r1, r1, lr
 8000d4a:	42a1      	cmp	r1, r4
 8000d4c:	46c8      	mov	r8, r9
 8000d4e:	46a6      	mov	lr, r4
 8000d50:	d356      	bcc.n	8000e00 <__udivmoddi4+0x2a4>
 8000d52:	d053      	beq.n	8000dfc <__udivmoddi4+0x2a0>
 8000d54:	b15d      	cbz	r5, 8000d6e <__udivmoddi4+0x212>
 8000d56:	ebb3 0208 	subs.w	r2, r3, r8
 8000d5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d62:	fa22 f306 	lsr.w	r3, r2, r6
 8000d66:	40f1      	lsrs	r1, r6
 8000d68:	431f      	orrs	r7, r3
 8000d6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d6e:	2600      	movs	r6, #0
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	f1c2 0320 	rsb	r3, r2, #32
 8000d7a:	40d8      	lsrs	r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa21 f303 	lsr.w	r3, r1, r3
 8000d84:	4091      	lsls	r1, r2
 8000d86:	4301      	orrs	r1, r0
 8000d88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8c:	fa1f fe8c 	uxth.w	lr, ip
 8000d90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d94:	fb07 3610 	mls	r6, r7, r0, r3
 8000d98:	0c0b      	lsrs	r3, r1, #16
 8000d9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000da2:	429e      	cmp	r6, r3
 8000da4:	fa04 f402 	lsl.w	r4, r4, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x260>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db2:	d22f      	bcs.n	8000e14 <__udivmoddi4+0x2b8>
 8000db4:	429e      	cmp	r6, r3
 8000db6:	d92d      	bls.n	8000e14 <__udivmoddi4+0x2b8>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	b289      	uxth	r1, r1
 8000dc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000dc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x28a>
 8000dd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ddc:	d216      	bcs.n	8000e0c <__udivmoddi4+0x2b0>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d914      	bls.n	8000e0c <__udivmoddi4+0x2b0>
 8000de2:	3e02      	subs	r6, #2
 8000de4:	4461      	add	r1, ip
 8000de6:	1ac9      	subs	r1, r1, r3
 8000de8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dec:	e738      	b.n	8000c60 <__udivmoddi4+0x104>
 8000dee:	462e      	mov	r6, r5
 8000df0:	4628      	mov	r0, r5
 8000df2:	e705      	b.n	8000c00 <__udivmoddi4+0xa4>
 8000df4:	4606      	mov	r6, r0
 8000df6:	e6e3      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e6f8      	b.n	8000bee <__udivmoddi4+0x92>
 8000dfc:	454b      	cmp	r3, r9
 8000dfe:	d2a9      	bcs.n	8000d54 <__udivmoddi4+0x1f8>
 8000e00:	ebb9 0802 	subs.w	r8, r9, r2
 8000e04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e7a3      	b.n	8000d54 <__udivmoddi4+0x1f8>
 8000e0c:	4646      	mov	r6, r8
 8000e0e:	e7ea      	b.n	8000de6 <__udivmoddi4+0x28a>
 8000e10:	4620      	mov	r0, r4
 8000e12:	e794      	b.n	8000d3e <__udivmoddi4+0x1e2>
 8000e14:	4640      	mov	r0, r8
 8000e16:	e7d1      	b.n	8000dbc <__udivmoddi4+0x260>
 8000e18:	46d0      	mov	r8, sl
 8000e1a:	e77b      	b.n	8000d14 <__udivmoddi4+0x1b8>
 8000e1c:	3b02      	subs	r3, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	e732      	b.n	8000c88 <__udivmoddi4+0x12c>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e709      	b.n	8000c3a <__udivmoddi4+0xde>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e742      	b.n	8000cb2 <__udivmoddi4+0x156>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <HAL_TIM_IC_CaptureCallback>:

	}
}*/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

	pot_x=__HAL_TIM_GET_COUNTER(htim);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000e42:	801a      	strh	r2, [r3, #0]
	if (2048<pot_x && pot_x<4096){
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e4c:	d90b      	bls.n	8000e66 <HAL_TIM_IC_CaptureCallback+0x36>
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e56:	d206      	bcs.n	8000e66 <HAL_TIM_IC_CaptureCallback+0x36>

		count=-(4095-pot_x);
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 8000e60:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	e005      	b.n	8000e72 <HAL_TIM_IC_CaptureCallback+0x42>
	}
	else{

		count=pot_x;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000e6e:	601a      	str	r2, [r3, #0]
	}
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	2000004c 	.word	0x2000004c
 8000e84:	20000050 	.word	0x20000050

08000e88 <hesaplama>:



void hesaplama() {
 8000e88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e8c:	af00      	add	r7, sp, #0

	if (count <= 0) // 4096==360 derece  Tam sol 0 , tam sağ 4096 düşünürsek
 8000e8e:	4bbc      	ldr	r3, [pc, #752]	; (8001180 <hesaplama+0x2f8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f300 8196 	bgt.w	80011c4 <hesaplama+0x33c>
			{

		//sol ic teker
		a=(((-1)*count)*(2*pi/4096)/12);
 8000e98:	4bb9      	ldr	r3, [pc, #740]	; (8001180 <hesaplama+0x2f8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff faf8 	bl	8000494 <__aeabi_i2d>
 8000ea4:	4604      	mov	r4, r0
 8000ea6:	460d      	mov	r5, r1
 8000ea8:	4bb6      	ldr	r3, [pc, #728]	; (8001184 <hesaplama+0x2fc>)
 8000eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	f7ff f9a3 	bl	80001fc <__adddf3>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4bb1      	ldr	r3, [pc, #708]	; (8001188 <hesaplama+0x300>)
 8000ec4:	f7ff fc7a 	bl	80007bc <__aeabi_ddiv>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4620      	mov	r0, r4
 8000ece:	4629      	mov	r1, r5
 8000ed0:	f7ff fb4a 	bl	8000568 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4baa      	ldr	r3, [pc, #680]	; (800118c <hesaplama+0x304>)
 8000ee2:	f7ff fc6b 	bl	80007bc <__aeabi_ddiv>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	49a9      	ldr	r1, [pc, #676]	; (8001190 <hesaplama+0x308>)
 8000eec:	e9c1 2300 	strd	r2, r3, [r1]
		b=tan(a);
 8000ef0:	4ba7      	ldr	r3, [pc, #668]	; (8001190 <hesaplama+0x308>)
 8000ef2:	ed93 7b00 	vldr	d7, [r3]
 8000ef6:	eeb0 0a47 	vmov.f32	s0, s14
 8000efa:	eef0 0a67 	vmov.f32	s1, s15
 8000efe:	f003 fd6f 	bl	80049e0 <tan>
 8000f02:	eeb0 7a40 	vmov.f32	s14, s0
 8000f06:	eef0 7a60 	vmov.f32	s15, s1
 8000f0a:	4ba2      	ldr	r3, [pc, #648]	; (8001194 <hesaplama+0x30c>)
 8000f0c:	ed83 7b00 	vstr	d7, [r3]
		d=(double)(pot_v*100)/4096*(1/0.5684);
 8000f10:	4ba1      	ldr	r3, [pc, #644]	; (8001198 <hesaplama+0x310>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2264      	movs	r2, #100	; 0x64
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff faaa 	bl	8000474 <__aeabi_ui2d>
 8000f20:	f04f 0200 	mov.w	r2, #0
 8000f24:	4b98      	ldr	r3, [pc, #608]	; (8001188 <hesaplama+0x300>)
 8000f26:	f7ff fc49 	bl	80007bc <__aeabi_ddiv>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	a391      	add	r3, pc, #580	; (adr r3, 8001178 <hesaplama+0x2f0>)
 8000f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f38:	f7ff fb16 	bl	8000568 <__aeabi_dmul>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4996      	ldr	r1, [pc, #600]	; (800119c <hesaplama+0x314>)
 8000f42:	e9c1 2300 	strd	r2, r3, [r1]
		R=L/b;
 8000f46:	4b96      	ldr	r3, [pc, #600]	; (80011a0 <hesaplama+0x318>)
 8000f48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f4c:	4b91      	ldr	r3, [pc, #580]	; (8001194 <hesaplama+0x30c>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	f7ff fc33 	bl	80007bc <__aeabi_ddiv>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4992      	ldr	r1, [pc, #584]	; (80011a4 <hesaplama+0x31c>)
 8000f5c:	e9c1 2300 	strd	r2, r3, [r1]

		S0 = atan((L/(R - (w / 2))));
 8000f60:	4b8f      	ldr	r3, [pc, #572]	; (80011a0 <hesaplama+0x318>)
 8000f62:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000f66:	4b8f      	ldr	r3, [pc, #572]	; (80011a4 <hesaplama+0x31c>)
 8000f68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8000f6c:	4b8e      	ldr	r3, [pc, #568]	; (80011a8 <hesaplama+0x320>)
 8000f6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f7a:	f7ff fc1f 	bl	80007bc <__aeabi_ddiv>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4640      	mov	r0, r8
 8000f84:	4649      	mov	r1, r9
 8000f86:	f7ff f937 	bl	80001f8 <__aeabi_dsub>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4620      	mov	r0, r4
 8000f90:	4629      	mov	r1, r5
 8000f92:	f7ff fc13 	bl	80007bc <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	ec43 2b17 	vmov	d7, r2, r3
 8000f9e:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa2:	eef0 0a67 	vmov.f32	s1, s15
 8000fa6:	f003 fb17 	bl	80045d8 <atan>
 8000faa:	eeb0 7a40 	vmov.f32	s14, s0
 8000fae:	eef0 7a60 	vmov.f32	s15, s1
 8000fb2:	4b7e      	ldr	r3, [pc, #504]	; (80011ac <hesaplama+0x324>)
 8000fb4:	ed83 7b00 	vstr	d7, [r3]
		S1 = atan((L/(R + (w / 2))));
 8000fb8:	4b79      	ldr	r3, [pc, #484]	; (80011a0 <hesaplama+0x318>)
 8000fba:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fbe:	4b7a      	ldr	r3, [pc, #488]	; (80011a8 <hesaplama+0x320>)
 8000fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fcc:	f7ff fbf6 	bl	80007bc <__aeabi_ddiv>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4b72      	ldr	r3, [pc, #456]	; (80011a4 <hesaplama+0x31c>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff f90d 	bl	80001fc <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	4629      	mov	r1, r5
 8000fea:	f7ff fbe7 	bl	80007bc <__aeabi_ddiv>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	ec43 2b17 	vmov	d7, r2, r3
 8000ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffa:	eef0 0a67 	vmov.f32	s1, s15
 8000ffe:	f003 faeb 	bl	80045d8 <atan>
 8001002:	eeb0 7a40 	vmov.f32	s14, s0
 8001006:	eef0 7a60 	vmov.f32	s15, s1
 800100a:	4b69      	ldr	r3, [pc, #420]	; (80011b0 <hesaplama+0x328>)
 800100c:	ed83 7b00 	vstr	d7, [r3]

		S0=atan(S0);
 8001010:	4b66      	ldr	r3, [pc, #408]	; (80011ac <hesaplama+0x324>)
 8001012:	ed93 7b00 	vldr	d7, [r3]
 8001016:	eeb0 0a47 	vmov.f32	s0, s14
 800101a:	eef0 0a67 	vmov.f32	s1, s15
 800101e:	f003 fadb 	bl	80045d8 <atan>
 8001022:	eeb0 7a40 	vmov.f32	s14, s0
 8001026:	eef0 7a60 	vmov.f32	s15, s1
 800102a:	4b60      	ldr	r3, [pc, #384]	; (80011ac <hesaplama+0x324>)
 800102c:	ed83 7b00 	vstr	d7, [r3]
		S1=atan(S1);
 8001030:	4b5f      	ldr	r3, [pc, #380]	; (80011b0 <hesaplama+0x328>)
 8001032:	ed93 7b00 	vldr	d7, [r3]
 8001036:	eeb0 0a47 	vmov.f32	s0, s14
 800103a:	eef0 0a67 	vmov.f32	s1, s15
 800103e:	f003 facb 	bl	80045d8 <atan>
 8001042:	eeb0 7a40 	vmov.f32	s14, s0
 8001046:	eef0 7a60 	vmov.f32	s15, s1
 800104a:	4b59      	ldr	r3, [pc, #356]	; (80011b0 <hesaplama+0x328>)
 800104c:	ed83 7b00 	vstr	d7, [r3]

		c=(sin((double)(S0)) - sin((double)(S1))) / (sin((double)(S0)) + sin((double)(S1)));
 8001050:	4b56      	ldr	r3, [pc, #344]	; (80011ac <hesaplama+0x324>)
 8001052:	ed93 7b00 	vldr	d7, [r3]
 8001056:	eeb0 0a47 	vmov.f32	s0, s14
 800105a:	eef0 0a67 	vmov.f32	s1, s15
 800105e:	f003 fc67 	bl	8004930 <sin>
 8001062:	ec55 4b10 	vmov	r4, r5, d0
 8001066:	4b52      	ldr	r3, [pc, #328]	; (80011b0 <hesaplama+0x328>)
 8001068:	ed93 7b00 	vldr	d7, [r3]
 800106c:	eeb0 0a47 	vmov.f32	s0, s14
 8001070:	eef0 0a67 	vmov.f32	s1, s15
 8001074:	f003 fc5c 	bl	8004930 <sin>
 8001078:	ec53 2b10 	vmov	r2, r3, d0
 800107c:	4620      	mov	r0, r4
 800107e:	4629      	mov	r1, r5
 8001080:	f7ff f8ba 	bl	80001f8 <__aeabi_dsub>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4614      	mov	r4, r2
 800108a:	461d      	mov	r5, r3
 800108c:	4b47      	ldr	r3, [pc, #284]	; (80011ac <hesaplama+0x324>)
 800108e:	ed93 7b00 	vldr	d7, [r3]
 8001092:	eeb0 0a47 	vmov.f32	s0, s14
 8001096:	eef0 0a67 	vmov.f32	s1, s15
 800109a:	f003 fc49 	bl	8004930 <sin>
 800109e:	ec59 8b10 	vmov	r8, r9, d0
 80010a2:	4b43      	ldr	r3, [pc, #268]	; (80011b0 <hesaplama+0x328>)
 80010a4:	ed93 7b00 	vldr	d7, [r3]
 80010a8:	eeb0 0a47 	vmov.f32	s0, s14
 80010ac:	eef0 0a67 	vmov.f32	s1, s15
 80010b0:	f003 fc3e 	bl	8004930 <sin>
 80010b4:	ec53 2b10 	vmov	r2, r3, d0
 80010b8:	4640      	mov	r0, r8
 80010ba:	4649      	mov	r1, r9
 80010bc:	f7ff f89e 	bl	80001fc <__adddf3>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4620      	mov	r0, r4
 80010c6:	4629      	mov	r1, r5
 80010c8:	f7ff fb78 	bl	80007bc <__aeabi_ddiv>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4938      	ldr	r1, [pc, #224]	; (80011b4 <hesaplama+0x32c>)
 80010d2:	e9c1 2300 	strd	r2, r3, [r1]

		K = (double)(c*d);
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <hesaplama+0x32c>)
 80010d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <hesaplama+0x314>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fa41 	bl	8000568 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fcfd 	bl	8000aec <__aeabi_d2uiz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <hesaplama+0x330>)
 80010f8:	801a      	strh	r2, [r3, #0]

		Wsol =(double)(d - K);
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <hesaplama+0x314>)
 80010fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001100:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <hesaplama+0x330>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff f9c5 	bl	8000494 <__aeabi_i2d>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4620      	mov	r0, r4
 8001110:	4629      	mov	r1, r5
 8001112:	f7ff f871 	bl	80001f8 <__aeabi_dsub>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fce5 	bl	8000aec <__aeabi_d2uiz>
 8001122:	4603      	mov	r3, r0
 8001124:	b29a      	uxth	r2, r3
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <hesaplama+0x334>)
 8001128:	801a      	strh	r2, [r3, #0]
		Wsag = (double)(d + K);
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <hesaplama+0x330>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f9b0 	bl	8000494 <__aeabi_i2d>
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <hesaplama+0x314>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff f85f 	bl	80001fc <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fcd1 	bl	8000aec <__aeabi_d2uiz>
 800114a:	4603      	mov	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <hesaplama+0x338>)
 8001150:	801a      	strh	r2, [r3, #0]



		Wsol = (4096 / 132) * Wsol;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <hesaplama+0x334>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	0152      	lsls	r2, r2, #5
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <hesaplama+0x334>)
 8001160:	801a      	strh	r2, [r3, #0]
		Wsag = (4096 / 146) * Wsag;
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <hesaplama+0x338>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	00d2      	lsls	r2, r2, #3
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <hesaplama+0x338>)
 8001172:	801a      	strh	r2, [r3, #0]

		Wsol = (4096 / 146) * Wsol;
		Wsag = (4096 / 132) * Wsag;

	}
}
 8001174:	e198      	b.n	80014a8 <hesaplama+0x620>
 8001176:	bf00      	nop
 8001178:	5cc79c8e 	.word	0x5cc79c8e
 800117c:	3ffc2631 	.word	0x3ffc2631
 8001180:	20000050 	.word	0x20000050
 8001184:	20000008 	.word	0x20000008
 8001188:	40b00000 	.word	0x40b00000
 800118c:	40280000 	.word	0x40280000
 8001190:	20000078 	.word	0x20000078
 8001194:	20000080 	.word	0x20000080
 8001198:	20000000 	.word	0x20000000
 800119c:	20000090 	.word	0x20000090
 80011a0:	20000010 	.word	0x20000010
 80011a4:	20000058 	.word	0x20000058
 80011a8:	20000018 	.word	0x20000018
 80011ac:	20000060 	.word	0x20000060
 80011b0:	20000068 	.word	0x20000068
 80011b4:	20000088 	.word	0x20000088
 80011b8:	20000070 	.word	0x20000070
 80011bc:	20000072 	.word	0x20000072
 80011c0:	20000074 	.word	0x20000074
	else if (count > 0) {
 80011c4:	4bbc      	ldr	r3, [pc, #752]	; (80014b8 <hesaplama+0x630>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f340 816d 	ble.w	80014a8 <hesaplama+0x620>
		a=(count*(2*pi/4096)/12);
 80011ce:	4bba      	ldr	r3, [pc, #744]	; (80014b8 <hesaplama+0x630>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f95e 	bl	8000494 <__aeabi_i2d>
 80011d8:	4604      	mov	r4, r0
 80011da:	460d      	mov	r5, r1
 80011dc:	4bb7      	ldr	r3, [pc, #732]	; (80014bc <hesaplama+0x634>)
 80011de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	f7ff f809 	bl	80001fc <__adddf3>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4bb2      	ldr	r3, [pc, #712]	; (80014c0 <hesaplama+0x638>)
 80011f8:	f7ff fae0 	bl	80007bc <__aeabi_ddiv>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4620      	mov	r0, r4
 8001202:	4629      	mov	r1, r5
 8001204:	f7ff f9b0 	bl	8000568 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4bab      	ldr	r3, [pc, #684]	; (80014c4 <hesaplama+0x63c>)
 8001216:	f7ff fad1 	bl	80007bc <__aeabi_ddiv>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	49aa      	ldr	r1, [pc, #680]	; (80014c8 <hesaplama+0x640>)
 8001220:	e9c1 2300 	strd	r2, r3, [r1]
		b=tan(a);
 8001224:	4ba8      	ldr	r3, [pc, #672]	; (80014c8 <hesaplama+0x640>)
 8001226:	ed93 7b00 	vldr	d7, [r3]
 800122a:	eeb0 0a47 	vmov.f32	s0, s14
 800122e:	eef0 0a67 	vmov.f32	s1, s15
 8001232:	f003 fbd5 	bl	80049e0 <tan>
 8001236:	eeb0 7a40 	vmov.f32	s14, s0
 800123a:	eef0 7a60 	vmov.f32	s15, s1
 800123e:	4ba3      	ldr	r3, [pc, #652]	; (80014cc <hesaplama+0x644>)
 8001240:	ed83 7b00 	vstr	d7, [r3]
		d=(double)(pot_v*100)/4096*(1/0.5684);
 8001244:	4ba2      	ldr	r3, [pc, #648]	; (80014d0 <hesaplama+0x648>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2264      	movs	r2, #100	; 0x64
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f910 	bl	8000474 <__aeabi_ui2d>
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b99      	ldr	r3, [pc, #612]	; (80014c0 <hesaplama+0x638>)
 800125a:	f7ff faaf 	bl	80007bc <__aeabi_ddiv>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	a392      	add	r3, pc, #584	; (adr r3, 80014b0 <hesaplama+0x628>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff f97c 	bl	8000568 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4997      	ldr	r1, [pc, #604]	; (80014d4 <hesaplama+0x64c>)
 8001276:	e9c1 2300 	strd	r2, r3, [r1]
		R=L/b;
 800127a:	4b97      	ldr	r3, [pc, #604]	; (80014d8 <hesaplama+0x650>)
 800127c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001280:	4b92      	ldr	r3, [pc, #584]	; (80014cc <hesaplama+0x644>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff fa99 	bl	80007bc <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4993      	ldr	r1, [pc, #588]	; (80014dc <hesaplama+0x654>)
 8001290:	e9c1 2300 	strd	r2, r3, [r1]
		S0 = atan((L/(R - (w / 2))));
 8001294:	4b90      	ldr	r3, [pc, #576]	; (80014d8 <hesaplama+0x650>)
 8001296:	e9d3 4500 	ldrd	r4, r5, [r3]
 800129a:	4b90      	ldr	r3, [pc, #576]	; (80014dc <hesaplama+0x654>)
 800129c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80012a0:	4b8f      	ldr	r3, [pc, #572]	; (80014e0 <hesaplama+0x658>)
 80012a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ae:	f7ff fa85 	bl	80007bc <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4640      	mov	r0, r8
 80012b8:	4649      	mov	r1, r9
 80012ba:	f7fe ff9d 	bl	80001f8 <__aeabi_dsub>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7ff fa79 	bl	80007bc <__aeabi_ddiv>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	ec43 2b17 	vmov	d7, r2, r3
 80012d2:	eeb0 0a47 	vmov.f32	s0, s14
 80012d6:	eef0 0a67 	vmov.f32	s1, s15
 80012da:	f003 f97d 	bl	80045d8 <atan>
 80012de:	eeb0 7a40 	vmov.f32	s14, s0
 80012e2:	eef0 7a60 	vmov.f32	s15, s1
 80012e6:	4b7f      	ldr	r3, [pc, #508]	; (80014e4 <hesaplama+0x65c>)
 80012e8:	ed83 7b00 	vstr	d7, [r3]
		S1 = atan((L/(R + (w / 2))));
 80012ec:	4b7a      	ldr	r3, [pc, #488]	; (80014d8 <hesaplama+0x650>)
 80012ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80012f2:	4b7b      	ldr	r3, [pc, #492]	; (80014e0 <hesaplama+0x658>)
 80012f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001300:	f7ff fa5c 	bl	80007bc <__aeabi_ddiv>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	4b73      	ldr	r3, [pc, #460]	; (80014dc <hesaplama+0x654>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7fe ff73 	bl	80001fc <__adddf3>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4620      	mov	r0, r4
 800131c:	4629      	mov	r1, r5
 800131e:	f7ff fa4d 	bl	80007bc <__aeabi_ddiv>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	ec43 2b17 	vmov	d7, r2, r3
 800132a:	eeb0 0a47 	vmov.f32	s0, s14
 800132e:	eef0 0a67 	vmov.f32	s1, s15
 8001332:	f003 f951 	bl	80045d8 <atan>
 8001336:	eeb0 7a40 	vmov.f32	s14, s0
 800133a:	eef0 7a60 	vmov.f32	s15, s1
 800133e:	4b6a      	ldr	r3, [pc, #424]	; (80014e8 <hesaplama+0x660>)
 8001340:	ed83 7b00 	vstr	d7, [r3]
		S0=atan(S0);
 8001344:	4b67      	ldr	r3, [pc, #412]	; (80014e4 <hesaplama+0x65c>)
 8001346:	ed93 7b00 	vldr	d7, [r3]
 800134a:	eeb0 0a47 	vmov.f32	s0, s14
 800134e:	eef0 0a67 	vmov.f32	s1, s15
 8001352:	f003 f941 	bl	80045d8 <atan>
 8001356:	eeb0 7a40 	vmov.f32	s14, s0
 800135a:	eef0 7a60 	vmov.f32	s15, s1
 800135e:	4b61      	ldr	r3, [pc, #388]	; (80014e4 <hesaplama+0x65c>)
 8001360:	ed83 7b00 	vstr	d7, [r3]
		S1=atan(S1);
 8001364:	4b60      	ldr	r3, [pc, #384]	; (80014e8 <hesaplama+0x660>)
 8001366:	ed93 7b00 	vldr	d7, [r3]
 800136a:	eeb0 0a47 	vmov.f32	s0, s14
 800136e:	eef0 0a67 	vmov.f32	s1, s15
 8001372:	f003 f931 	bl	80045d8 <atan>
 8001376:	eeb0 7a40 	vmov.f32	s14, s0
 800137a:	eef0 7a60 	vmov.f32	s15, s1
 800137e:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <hesaplama+0x660>)
 8001380:	ed83 7b00 	vstr	d7, [r3]
		c=(sin((double)(S0)) - sin((double)(S1))) / (sin((double)(S0)) + sin((double)(S1)));
 8001384:	4b57      	ldr	r3, [pc, #348]	; (80014e4 <hesaplama+0x65c>)
 8001386:	ed93 7b00 	vldr	d7, [r3]
 800138a:	eeb0 0a47 	vmov.f32	s0, s14
 800138e:	eef0 0a67 	vmov.f32	s1, s15
 8001392:	f003 facd 	bl	8004930 <sin>
 8001396:	ec55 4b10 	vmov	r4, r5, d0
 800139a:	4b53      	ldr	r3, [pc, #332]	; (80014e8 <hesaplama+0x660>)
 800139c:	ed93 7b00 	vldr	d7, [r3]
 80013a0:	eeb0 0a47 	vmov.f32	s0, s14
 80013a4:	eef0 0a67 	vmov.f32	s1, s15
 80013a8:	f003 fac2 	bl	8004930 <sin>
 80013ac:	ec53 2b10 	vmov	r2, r3, d0
 80013b0:	4620      	mov	r0, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	f7fe ff20 	bl	80001f8 <__aeabi_dsub>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4614      	mov	r4, r2
 80013be:	461d      	mov	r5, r3
 80013c0:	4b48      	ldr	r3, [pc, #288]	; (80014e4 <hesaplama+0x65c>)
 80013c2:	ed93 7b00 	vldr	d7, [r3]
 80013c6:	eeb0 0a47 	vmov.f32	s0, s14
 80013ca:	eef0 0a67 	vmov.f32	s1, s15
 80013ce:	f003 faaf 	bl	8004930 <sin>
 80013d2:	ec59 8b10 	vmov	r8, r9, d0
 80013d6:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <hesaplama+0x660>)
 80013d8:	ed93 7b00 	vldr	d7, [r3]
 80013dc:	eeb0 0a47 	vmov.f32	s0, s14
 80013e0:	eef0 0a67 	vmov.f32	s1, s15
 80013e4:	f003 faa4 	bl	8004930 <sin>
 80013e8:	ec53 2b10 	vmov	r2, r3, d0
 80013ec:	4640      	mov	r0, r8
 80013ee:	4649      	mov	r1, r9
 80013f0:	f7fe ff04 	bl	80001fc <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4620      	mov	r0, r4
 80013fa:	4629      	mov	r1, r5
 80013fc:	f7ff f9de 	bl	80007bc <__aeabi_ddiv>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4939      	ldr	r1, [pc, #228]	; (80014ec <hesaplama+0x664>)
 8001406:	e9c1 2300 	strd	r2, r3, [r1]
		K = (double)(c*d);
 800140a:	4b38      	ldr	r3, [pc, #224]	; (80014ec <hesaplama+0x664>)
 800140c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <hesaplama+0x64c>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff f8a7 	bl	8000568 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fb63 	bl	8000aec <__aeabi_d2uiz>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <hesaplama+0x668>)
 800142c:	801a      	strh	r2, [r3, #0]
		Wsol = (double)(d + K);
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <hesaplama+0x668>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f82e 	bl	8000494 <__aeabi_i2d>
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <hesaplama+0x64c>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7fe fedd 	bl	80001fc <__adddf3>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fb4f 	bl	8000aec <__aeabi_d2uiz>
 800144e:	4603      	mov	r3, r0
 8001450:	b29a      	uxth	r2, r3
 8001452:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <hesaplama+0x66c>)
 8001454:	801a      	strh	r2, [r3, #0]
		Wsag = (double)(d - K);
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <hesaplama+0x64c>)
 8001458:	e9d3 4500 	ldrd	r4, r5, [r3]
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <hesaplama+0x668>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f817 	bl	8000494 <__aeabi_i2d>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4620      	mov	r0, r4
 800146c:	4629      	mov	r1, r5
 800146e:	f7fe fec3 	bl	80001f8 <__aeabi_dsub>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fb37 	bl	8000aec <__aeabi_d2uiz>
 800147e:	4603      	mov	r3, r0
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <hesaplama+0x670>)
 8001484:	801a      	strh	r2, [r3, #0]
		Wsol = (4096 / 146) * Wsol;
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <hesaplama+0x66c>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	00d2      	lsls	r2, r2, #3
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <hesaplama+0x66c>)
 8001496:	801a      	strh	r2, [r3, #0]
		Wsag = (4096 / 132) * Wsag;
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <hesaplama+0x670>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	0152      	lsls	r2, r2, #5
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <hesaplama+0x670>)
 80014a6:	801a      	strh	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014ae:	bf00      	nop
 80014b0:	5cc79c8e 	.word	0x5cc79c8e
 80014b4:	3ffc2631 	.word	0x3ffc2631
 80014b8:	20000050 	.word	0x20000050
 80014bc:	20000008 	.word	0x20000008
 80014c0:	40b00000 	.word	0x40b00000
 80014c4:	40280000 	.word	0x40280000
 80014c8:	20000078 	.word	0x20000078
 80014cc:	20000080 	.word	0x20000080
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000090 	.word	0x20000090
 80014d8:	20000010 	.word	0x20000010
 80014dc:	20000058 	.word	0x20000058
 80014e0:	20000018 	.word	0x20000018
 80014e4:	20000060 	.word	0x20000060
 80014e8:	20000068 	.word	0x20000068
 80014ec:	20000088 	.word	0x20000088
 80014f0:	20000070 	.word	0x20000070
 80014f4:	20000072 	.word	0x20000072
 80014f8:	20000074 	.word	0x20000074

080014fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001500:	f000 fc2e 	bl	8001d60 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001504:	f000 f822 	bl	800154c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001508:	f000 f9c2 	bl	8001890 <MX_GPIO_Init>
  MX_DMA_Init();
 800150c:	f000 f9a0 	bl	8001850 <MX_DMA_Init>
  MX_ADC1_Init();
 8001510:	f000 f888 	bl	8001624 <MX_ADC1_Init>
  MX_DAC_Init();
 8001514:	f000 f8e6 	bl	80016e4 <MX_DAC_Init>
  MX_USART1_UART_Init();
 8001518:	f000 f970 	bl	80017fc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800151c:	f000 f916 	bl	800174c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

 // HAL_ADC_Start_DMA(&hadc1,adcbuffer,2);
 // HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 // HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
    HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001520:	213c      	movs	r1, #60	; 0x3c
 8001522:	4808      	ldr	r0, [pc, #32]	; (8001544 <main+0x48>)
 8001524:	f002 fa56 	bl	80039d4 <HAL_TIM_Encoder_Start>
    pot_x+=2048;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <main+0x4c>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <main+0x4c>)
 8001534:	801a      	strh	r2, [r3, #0]

//      HAL_ADC_ConvCpltCallback(&hadc1);
//	    get_pot_x();
//		pot_v=(pot_v*100)/4096;
//		sprintf(hold,"%d",pot_v);
		hesaplama();
 8001536:	f7ff fca7 	bl	8000e88 <hesaplama>
//		Sent_DAC();
//		send_Serial("t6",hold);
//		send_tera();

		HAL_TIM_IC_CaptureCallback(&htim1);
 800153a:	4802      	ldr	r0, [pc, #8]	; (8001544 <main+0x48>)
 800153c:	f7ff fc78 	bl	8000e30 <HAL_TIM_IC_CaptureCallback>
		hesaplama();
 8001540:	e7f9      	b.n	8001536 <main+0x3a>
 8001542:	bf00      	nop
 8001544:	20000154 	.word	0x20000154
 8001548:	2000004c 	.word	0x2000004c

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b094      	sub	sp, #80	; 0x50
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 0320 	add.w	r3, r7, #32
 8001556:	2230      	movs	r2, #48	; 0x30
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f003 f834 	bl	80045c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	4b29      	ldr	r3, [pc, #164]	; (800161c <SystemClock_Config+0xd0>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	4a28      	ldr	r2, [pc, #160]	; (800161c <SystemClock_Config+0xd0>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157e:	6413      	str	r3, [r2, #64]	; 0x40
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <SystemClock_Config+0xd0>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <SystemClock_Config+0xd4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001598:	4a21      	ldr	r2, [pc, #132]	; (8001620 <SystemClock_Config+0xd4>)
 800159a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <SystemClock_Config+0xd4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b4:	2310      	movs	r3, #16
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b8:	2302      	movs	r3, #2
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015c0:	2308      	movs	r3, #8
 80015c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80015c4:	2348      	movs	r3, #72	; 0x48
 80015c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80015cc:	2303      	movs	r3, #3
 80015ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 fcbf 	bl	8002f58 <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015e0:	f000 f98c 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	230f      	movs	r3, #15
 80015e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e8:	2302      	movs	r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2102      	movs	r1, #2
 8001602:	4618      	mov	r0, r3
 8001604:	f001 ff20 	bl	8003448 <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800160e:	f000 f975 	bl	80018fc <Error_Handler>
  }
}
 8001612:	bf00      	nop
 8001614:	3750      	adds	r7, #80	; 0x50
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40007000 	.word	0x40007000

08001624 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800162a:	463b      	mov	r3, r7
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <MX_ADC1_Init+0xb4>)
 8001638:	4a28      	ldr	r2, [pc, #160]	; (80016dc <MX_ADC1_Init+0xb8>)
 800163a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <MX_ADC1_Init+0xb4>)
 800163e:	2200      	movs	r2, #0
 8001640:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <MX_ADC1_Init+0xb4>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <MX_ADC1_Init+0xb4>)
 800164a:	2201      	movs	r2, #1
 800164c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <MX_ADC1_Init+0xb4>)
 8001650:	2201      	movs	r2, #1
 8001652:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <MX_ADC1_Init+0xb4>)
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <MX_ADC1_Init+0xb4>)
 800165e:	2200      	movs	r2, #0
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <MX_ADC1_Init+0xb4>)
 8001664:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <MX_ADC1_Init+0xbc>)
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <MX_ADC1_Init+0xb4>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_ADC1_Init+0xb4>)
 8001670:	2202      	movs	r2, #2
 8001672:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001674:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <MX_ADC1_Init+0xb4>)
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <MX_ADC1_Init+0xb4>)
 800167e:	2201      	movs	r2, #1
 8001680:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001682:	4815      	ldr	r0, [pc, #84]	; (80016d8 <MX_ADC1_Init+0xb4>)
 8001684:	f000 fbde 	bl	8001e44 <HAL_ADC_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800168e:	f000 f935 	bl	80018fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001692:	2301      	movs	r3, #1
 8001694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001696:	2301      	movs	r3, #1
 8001698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800169a:	2304      	movs	r3, #4
 800169c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169e:	463b      	mov	r3, r7
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_ADC1_Init+0xb4>)
 80016a4:	f000 fc12 	bl	8001ecc <HAL_ADC_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80016ae:	f000 f925 	bl	80018fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80016b6:	2302      	movs	r3, #2
 80016b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <MX_ADC1_Init+0xb4>)
 80016c0:	f000 fc04 	bl	8001ecc <HAL_ADC_ConfigChannel>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80016ca:	f000 f917 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000098 	.word	0x20000098
 80016dc:	40012000 	.word	0x40012000
 80016e0:	0f000001 	.word	0x0f000001

080016e4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016ea:	463b      	mov	r3, r7
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_DAC_Init+0x60>)
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <MX_DAC_Init+0x64>)
 80016f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80016f8:	4812      	ldr	r0, [pc, #72]	; (8001744 <MX_DAC_Init+0x60>)
 80016fa:	f000 ff26 	bl	800254a <HAL_DAC_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001704:	f000 f8fa 	bl	80018fc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001708:	2300      	movs	r3, #0
 800170a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001710:	463b      	mov	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	4619      	mov	r1, r3
 8001716:	480b      	ldr	r0, [pc, #44]	; (8001744 <MX_DAC_Init+0x60>)
 8001718:	f000 ff39 	bl	800258e <HAL_DAC_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001722:	f000 f8eb 	bl	80018fc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001726:	463b      	mov	r3, r7
 8001728:	2210      	movs	r2, #16
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_DAC_Init+0x60>)
 800172e:	f000 ff2e 	bl	800258e <HAL_DAC_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001738:	f000 f8e0 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000140 	.word	0x20000140
 8001748:	40007400 	.word	0x40007400

0800174c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	2224      	movs	r2, #36	; 0x24
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f002 ff34 	bl	80045c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <MX_TIM1_Init+0xa8>)
 800176a:	4a23      	ldr	r2, [pc, #140]	; (80017f8 <MX_TIM1_Init+0xac>)
 800176c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <MX_TIM1_Init+0xa8>)
 8001770:	220a      	movs	r2, #10
 8001772:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_TIM1_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <MX_TIM1_Init+0xa8>)
 800177c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001780:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_TIM1_Init+0xa8>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_TIM1_Init+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <MX_TIM1_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001794:	2303      	movs	r3, #3
 8001796:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800179c:	2301      	movs	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80017a4:	230a      	movs	r3, #10
 80017a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80017a8:	2302      	movs	r3, #2
 80017aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017ac:	2301      	movs	r3, #1
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80017b4:	230a      	movs	r3, #10
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	4619      	mov	r1, r3
 80017be:	480d      	ldr	r0, [pc, #52]	; (80017f4 <MX_TIM1_Init+0xa8>)
 80017c0:	f002 f862 	bl	8003888 <HAL_TIM_Encoder_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80017ca:	f000 f897 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	4806      	ldr	r0, [pc, #24]	; (80017f4 <MX_TIM1_Init+0xa8>)
 80017dc:	f002 fb7e 	bl	8003edc <HAL_TIMEx_MasterConfigSynchronization>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80017e6:	f000 f889 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	3730      	adds	r7, #48	; 0x30
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000154 	.word	0x20000154
 80017f8:	40010000 	.word	0x40010000

080017fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <MX_USART1_UART_Init+0x50>)
 8001804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001808:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800180c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001822:	2208      	movs	r2, #8
 8001824:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001834:	f002 fbe2 	bl	8003ffc <HAL_UART_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800183e:	f000 f85d 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000019c 	.word	0x2000019c
 800184c:	40011000 	.word	0x40011000

08001850 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_DMA_Init+0x3c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <MX_DMA_Init+0x3c>)
 8001860:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_DMA_Init+0x3c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2038      	movs	r0, #56	; 0x38
 8001878:	f000 fe31 	bl	80024de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800187c:	2038      	movs	r0, #56	; 0x38
 800187e:	f000 fe4a 	bl	8002516 <HAL_NVIC_EnableIRQ>

}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <MX_GPIO_Init+0x68>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <MX_GPIO_Init+0x68>)
 80018a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <MX_GPIO_Init+0x68>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <MX_GPIO_Init+0x68>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <MX_GPIO_Init+0x68>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <MX_GPIO_Init+0x68>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_GPIO_Init+0x68>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <MX_GPIO_Init+0x68>)
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_GPIO_Init+0x68>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]

}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <HAL_MspInit+0x4c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <HAL_MspInit+0x4c>)
 8001918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <HAL_MspInit+0x4c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_MspInit+0x4c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_MspInit+0x4c>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_MspInit+0x4c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800

08001958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a2f      	ldr	r2, [pc, #188]	; (8001a34 <HAL_ADC_MspInit+0xdc>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d158      	bne.n	8001a2c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <HAL_ADC_MspInit+0xe0>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	4a2d      	ldr	r2, [pc, #180]	; (8001a38 <HAL_ADC_MspInit+0xe0>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001988:	6453      	str	r3, [r2, #68]	; 0x44
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_ADC_MspInit+0xe0>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_ADC_MspInit+0xe0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <HAL_ADC_MspInit+0xe0>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <HAL_ADC_MspInit+0xe0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80019b2:	2306      	movs	r3, #6
 80019b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b6:	2303      	movs	r3, #3
 80019b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	481d      	ldr	r0, [pc, #116]	; (8001a3c <HAL_ADC_MspInit+0xe4>)
 80019c6:	f001 f91b 	bl	8002c00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_ADC_MspInit+0xe8>)
 80019cc:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <HAL_ADC_MspInit+0xec>)
 80019ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_ADC_MspInit+0xe8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_ADC_MspInit+0xe8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_ADC_MspInit+0xe8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_ADC_MspInit+0xe8>)
 80019e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_ADC_MspInit+0xe8>)
 80019ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_ADC_MspInit+0xe8>)
 80019f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_ADC_MspInit+0xe8>)
 80019fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <HAL_ADC_MspInit+0xe8>)
 8001a04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a08:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_ADC_MspInit+0xe8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <HAL_ADC_MspInit+0xe8>)
 8001a12:	f000 fe0b 	bl	800262c <HAL_DMA_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001a1c:	f7ff ff6e 	bl	80018fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_ADC_MspInit+0xe8>)
 8001a24:	639a      	str	r2, [r3, #56]	; 0x38
 8001a26:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <HAL_ADC_MspInit+0xe8>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	; 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40012000 	.word	0x40012000
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	200000e0 	.word	0x200000e0
 8001a44:	40026410 	.word	0x40026410

08001a48 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_DAC_MspInit+0x7c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d127      	bne.n	8001aba <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_DAC_MspInit+0x80>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <HAL_DAC_MspInit+0x80>)
 8001a74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_DAC_MspInit+0x80>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_DAC_MspInit+0x80>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <HAL_DAC_MspInit+0x80>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_DAC_MspInit+0x80>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001aa2:	2330      	movs	r3, #48	; 0x30
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4805      	ldr	r0, [pc, #20]	; (8001acc <HAL_DAC_MspInit+0x84>)
 8001ab6:	f001 f8a3 	bl	8002c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	; 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40007400 	.word	0x40007400
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020000 	.word	0x40020000

08001ad0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a29      	ldr	r2, [pc, #164]	; (8001b94 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d14c      	bne.n	8001b8c <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a27      	ldr	r2, [pc, #156]	; (8001b98 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a20      	ldr	r2, [pc, #128]	; (8001b98 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001b18:	f043 0310 	orr.w	r3, r3, #16
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001b2a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	4815      	ldr	r0, [pc, #84]	; (8001b9c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b48:	f001 f85a 	bl	8002c00 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2018      	movs	r0, #24
 8001b52:	f000 fcc4 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b56:	2018      	movs	r0, #24
 8001b58:	f000 fcdd 	bl	8002516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2019      	movs	r0, #25
 8001b62:	f000 fcbc 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b66:	2019      	movs	r0, #25
 8001b68:	f000 fcd5 	bl	8002516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	201a      	movs	r0, #26
 8001b72:	f000 fcb4 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b76:	201a      	movs	r0, #26
 8001b78:	f000 fccd 	bl	8002516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2100      	movs	r1, #0
 8001b80:	201b      	movs	r0, #27
 8001b82:	f000 fcac 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b86:	201b      	movs	r0, #27
 8001b88:	f000 fcc5 	bl	8002516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40010000 	.word	0x40010000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a19      	ldr	r2, [pc, #100]	; (8001c24 <HAL_UART_MspInit+0x84>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d12c      	bne.n	8001c1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_UART_MspInit+0x88>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <HAL_UART_MspInit+0x88>)
 8001bcc:	f043 0310 	orr.w	r3, r3, #16
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_UART_MspInit+0x88>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_UART_MspInit+0x88>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <HAL_UART_MspInit+0x88>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_UART_MspInit+0x88>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <HAL_UART_MspInit+0x8c>)
 8001c18:	f000 fff2 	bl	8002c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	; 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40011000 	.word	0x40011000
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020000 	.word	0x40020000

08001c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <NMI_Handler+0x4>

08001c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <MemManage_Handler+0x4>

08001c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7c:	f000 f8c2 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001c8a:	f001 ff31 	bl	8003af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000154 	.word	0x20000154

08001c98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c9e:	f001 ff27 	bl	8003af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000154 	.word	0x20000154

08001cac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001cb2:	f001 ff1d 	bl	8003af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000154 	.word	0x20000154

08001cc0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM1_CC_IRQHandler+0x10>)
 8001cc6:	f001 ff13 	bl	8003af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000154 	.word	0x20000154

08001cd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <DMA2_Stream0_IRQHandler+0x10>)
 8001cda:	f000 fd55 	bl	8002788 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200000e0 	.word	0x200000e0

08001ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <SystemInit+0x20>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <SystemInit+0x20>)
 8001cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d44 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d10:	480d      	ldr	r0, [pc, #52]	; (8001d48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d12:	490e      	ldr	r1, [pc, #56]	; (8001d4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d14:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d26:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d28:	4c0b      	ldr	r4, [pc, #44]	; (8001d58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d36:	f7ff ffd7 	bl	8001ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f002 fc21 	bl	8004580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3e:	f7ff fbdd 	bl	80014fc <main>
  bx  lr    
 8001d42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d44:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001d50:	08006098 	.word	0x08006098
  ldr r2, =_sbss
 8001d54:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001d58:	200001e4 	.word	0x200001e4

08001d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <HAL_Init+0x40>)
 8001d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_Init+0x40>)
 8001d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_Init+0x40>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d88:	2003      	movs	r0, #3
 8001d8a:	f000 fb9d 	bl	80024c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8e:	200f      	movs	r0, #15
 8001d90:	f000 f808 	bl	8001da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d94:	f7ff fdb8 	bl	8001908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_InitTick+0x54>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x58>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fbb5 	bl	8002532 <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00e      	b.n	8001df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d80a      	bhi.n	8001dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f000 fb7d 	bl	80024de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <HAL_InitTick+0x5c>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000020 	.word	0x20000020
 8001dfc:	20000028 	.word	0x20000028
 8001e00:	20000024 	.word	0x20000024

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000028 	.word	0x20000028
 8001e28:	200001e0 	.word	0x200001e0

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200001e0 	.word	0x200001e0

08001e44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e033      	b.n	8001ec2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fd78 	bl	8001958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d118      	bne.n	8001eb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e8a:	f023 0302 	bic.w	r3, r3, #2
 8001e8e:	f043 0202 	orr.w	r2, r3, #2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f94a 	bl	8002130 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	f043 0201 	orr.w	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb2:	e001      	b.n	8001eb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1c>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e113      	b.n	8002110 <HAL_ADC_ConfigChannel+0x244>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b09      	cmp	r3, #9
 8001ef6:	d925      	bls.n	8001f44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68d9      	ldr	r1, [r3, #12]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	4613      	mov	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b1e      	subs	r3, #30
 8001f0e:	2207      	movs	r2, #7
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43da      	mvns	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68d9      	ldr	r1, [r3, #12]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	4603      	mov	r3, r0
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4403      	add	r3, r0
 8001f36:	3b1e      	subs	r3, #30
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	e022      	b.n	8001f8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6919      	ldr	r1, [r3, #16]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	2207      	movs	r2, #7
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	400a      	ands	r2, r1
 8001f66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6919      	ldr	r1, [r3, #16]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4403      	add	r3, r0
 8001f80:	409a      	lsls	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d824      	bhi.n	8001fdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b05      	subs	r3, #5
 8001fa4:	221f      	movs	r2, #31
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b05      	subs	r3, #5
 8001fce:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fda:	e04c      	b.n	8002076 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b0c      	cmp	r3, #12
 8001fe2:	d824      	bhi.n	800202e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b23      	subs	r3, #35	; 0x23
 8001ff6:	221f      	movs	r2, #31
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43da      	mvns	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	400a      	ands	r2, r1
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	4618      	mov	r0, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	3b23      	subs	r3, #35	; 0x23
 8002020:	fa00 f203 	lsl.w	r2, r0, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
 800202c:	e023      	b.n	8002076 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3b41      	subs	r3, #65	; 0x41
 8002040:	221f      	movs	r2, #31
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	400a      	ands	r2, r1
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	4618      	mov	r0, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	3b41      	subs	r3, #65	; 0x41
 800206a:	fa00 f203 	lsl.w	r2, r0, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002076:	4b29      	ldr	r3, [pc, #164]	; (800211c <HAL_ADC_ConfigChannel+0x250>)
 8002078:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_ADC_ConfigChannel+0x254>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d10f      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1d8>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b12      	cmp	r3, #18
 800208a:	d10b      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <HAL_ADC_ConfigChannel+0x254>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d12b      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x23a>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_ADC_ConfigChannel+0x258>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d003      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x1f4>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b11      	cmp	r3, #17
 80020be:	d122      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a11      	ldr	r2, [pc, #68]	; (8002124 <HAL_ADC_ConfigChannel+0x258>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d111      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_ADC_ConfigChannel+0x25c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <HAL_ADC_ConfigChannel+0x260>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	0c9a      	lsrs	r2, r3, #18
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020f8:	e002      	b.n	8002100 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40012300 	.word	0x40012300
 8002120:	40012000 	.word	0x40012000
 8002124:	10000012 	.word	0x10000012
 8002128:	20000020 	.word	0x20000020
 800212c:	431bde83 	.word	0x431bde83

08002130 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002138:	4b79      	ldr	r3, [pc, #484]	; (8002320 <ADC_Init+0x1f0>)
 800213a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	431a      	orrs	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002164:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	021a      	lsls	r2, r3, #8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6899      	ldr	r1, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	4a58      	ldr	r2, [pc, #352]	; (8002324 <ADC_Init+0x1f4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d022      	beq.n	800220e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6899      	ldr	r1, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6899      	ldr	r1, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	e00f      	b.n	800222e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800221c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800222c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0202 	bic.w	r2, r2, #2
 800223c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7e1b      	ldrb	r3, [r3, #24]
 8002248:	005a      	lsls	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01b      	beq.n	8002294 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800226a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800227a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	3b01      	subs	r3, #1
 8002288:	035a      	lsls	r2, r3, #13
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	e007      	b.n	80022a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	3b01      	subs	r3, #1
 80022c0:	051a      	lsls	r2, r3, #20
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6899      	ldr	r1, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022e6:	025a      	lsls	r2, r3, #9
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	029a      	lsls	r2, r3, #10
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	40012300 	.word	0x40012300
 8002324:	0f000001 	.word	0x0f000001

08002328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002344:	4013      	ands	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235a:	4a04      	ldr	r2, [pc, #16]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	60d3      	str	r3, [r2, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <__NVIC_GetPriorityGrouping+0x18>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 0307 	and.w	r3, r3, #7
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	2b00      	cmp	r3, #0
 800239c:	db0b      	blt.n	80023b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	4907      	ldr	r1, [pc, #28]	; (80023c4 <__NVIC_EnableIRQ+0x38>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	2001      	movs	r0, #1
 80023ae:	fa00 f202 	lsl.w	r2, r0, r2
 80023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000e100 	.word	0xe000e100

080023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db0a      	blt.n	80023f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	490c      	ldr	r1, [pc, #48]	; (8002414 <__NVIC_SetPriority+0x4c>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f0:	e00a      	b.n	8002408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4908      	ldr	r1, [pc, #32]	; (8002418 <__NVIC_SetPriority+0x50>)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	3b04      	subs	r3, #4
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	440b      	add	r3, r1
 8002406:	761a      	strb	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000e100 	.word	0xe000e100
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f1c3 0307 	rsb	r3, r3, #7
 8002436:	2b04      	cmp	r3, #4
 8002438:	bf28      	it	cs
 800243a:	2304      	movcs	r3, #4
 800243c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3304      	adds	r3, #4
 8002442:	2b06      	cmp	r3, #6
 8002444:	d902      	bls.n	800244c <NVIC_EncodePriority+0x30>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3b03      	subs	r3, #3
 800244a:	e000      	b.n	800244e <NVIC_EncodePriority+0x32>
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	401a      	ands	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002464:	f04f 31ff 	mov.w	r1, #4294967295
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43d9      	mvns	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	4313      	orrs	r3, r2
         );
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002494:	d301      	bcc.n	800249a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002496:	2301      	movs	r3, #1
 8002498:	e00f      	b.n	80024ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <SysTick_Config+0x40>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a2:	210f      	movs	r1, #15
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f7ff ff8e 	bl	80023c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <SysTick_Config+0x40>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <SysTick_Config+0x40>)
 80024b4:	2207      	movs	r2, #7
 80024b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	e000e010 	.word	0xe000e010

080024c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ff29 	bl	8002328 <__NVIC_SetPriorityGrouping>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f0:	f7ff ff3e 	bl	8002370 <__NVIC_GetPriorityGrouping>
 80024f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	6978      	ldr	r0, [r7, #20]
 80024fc:	f7ff ff8e 	bl	800241c <NVIC_EncodePriority>
 8002500:	4602      	mov	r2, r0
 8002502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff5d 	bl	80023c8 <__NVIC_SetPriority>
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff31 	bl	800238c <__NVIC_EnableIRQ>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ffa2 	bl	8002484 <SysTick_Config>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e014      	b.n	8002586 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	791b      	ldrb	r3, [r3, #4]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d105      	bne.n	8002572 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fa6b 	bl	8001a48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2202      	movs	r2, #2
 8002576:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800258e:	b480      	push	{r7}
 8002590:	b087      	sub	sp, #28
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	795b      	ldrb	r3, [r3, #5]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_DAC_ConfigChannel+0x18>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e03c      	b.n	8002620 <HAL_DAC_ConfigChannel+0x92>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2202      	movs	r2, #2
 80025b0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4013      	ands	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6819      	ldr	r1, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	22c0      	movs	r2, #192	; 0xc0
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43da      	mvns	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	400a      	ands	r2, r1
 8002610:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff fbf8 	bl	8001e2c <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e099      	b.n	800277c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002668:	e00f      	b.n	800268a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800266a:	f7ff fbdf 	bl	8001e2c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b05      	cmp	r3, #5
 8002676:	d908      	bls.n	800268a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2203      	movs	r2, #3
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e078      	b.n	800277c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1e8      	bne.n	800266a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_DMA_Init+0x158>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d107      	bne.n	80026f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	4313      	orrs	r3, r2
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f023 0307 	bic.w	r3, r3, #7
 800270a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	2b04      	cmp	r3, #4
 800271c:	d117      	bne.n	800274e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00e      	beq.n	800274e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f9e9 	bl	8002b08 <DMA_CheckFifoParam>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2240      	movs	r2, #64	; 0x40
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800274a:	2301      	movs	r3, #1
 800274c:	e016      	b.n	800277c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f9a0 	bl	8002a9c <DMA_CalcBaseAndBitshift>
 800275c:	4603      	mov	r3, r0
 800275e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	223f      	movs	r2, #63	; 0x3f
 8002766:	409a      	lsls	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	f010803f 	.word	0xf010803f

08002788 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002794:	4b8e      	ldr	r3, [pc, #568]	; (80029d0 <HAL_DMA_IRQHandler+0x248>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a8e      	ldr	r2, [pc, #568]	; (80029d4 <HAL_DMA_IRQHandler+0x24c>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0a9b      	lsrs	r3, r3, #10
 80027a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	2208      	movs	r2, #8
 80027b4:	409a      	lsls	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01a      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0204 	bic.w	r2, r2, #4
 80027da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	2208      	movs	r2, #8
 80027e2:	409a      	lsls	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	f043 0201 	orr.w	r2, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	2201      	movs	r2, #1
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d012      	beq.n	800282a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	2201      	movs	r2, #1
 8002818:	409a      	lsls	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	f043 0202 	orr.w	r2, r3, #2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	2204      	movs	r2, #4
 8002830:	409a      	lsls	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d012      	beq.n	8002860 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00b      	beq.n	8002860 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	2204      	movs	r2, #4
 800284e:	409a      	lsls	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	f043 0204 	orr.w	r2, r3, #4
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	2210      	movs	r2, #16
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d043      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d03c      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	2210      	movs	r2, #16
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d018      	beq.n	80028ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d024      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
 80028b6:	e01f      	b.n	80028f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01b      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
 80028c8:	e016      	b.n	80028f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d107      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0208 	bic.w	r2, r2, #8
 80028e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	2220      	movs	r2, #32
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 808f 	beq.w	8002a28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8087 	beq.w	8002a28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	2220      	movs	r2, #32
 8002920:	409a      	lsls	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b05      	cmp	r3, #5
 8002930:	d136      	bne.n	80029a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0216 	bic.w	r2, r2, #22
 8002940:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002950:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d103      	bne.n	8002962 <HAL_DMA_IRQHandler+0x1da>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0208 	bic.w	r2, r2, #8
 8002970:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	223f      	movs	r2, #63	; 0x3f
 8002978:	409a      	lsls	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002992:	2b00      	cmp	r3, #0
 8002994:	d07e      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
        }
        return;
 800299e:	e079      	b.n	8002a94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d01d      	beq.n	80029ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10d      	bne.n	80029d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d031      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
 80029cc:	e02c      	b.n	8002a28 <HAL_DMA_IRQHandler+0x2a0>
 80029ce:	bf00      	nop
 80029d0:	20000020 	.word	0x20000020
 80029d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d023      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
 80029e8:	e01e      	b.n	8002a28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10f      	bne.n	8002a18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0210 	bic.w	r2, r2, #16
 8002a06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d032      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d022      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2205      	movs	r2, #5
 8002a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3301      	adds	r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d307      	bcc.n	8002a70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f2      	bne.n	8002a54 <HAL_DMA_IRQHandler+0x2cc>
 8002a6e:	e000      	b.n	8002a72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
 8002a92:	e000      	b.n	8002a96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a94:	bf00      	nop
    }
  }
}
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3b10      	subs	r3, #16
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <DMA_CalcBaseAndBitshift+0x64>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <DMA_CalcBaseAndBitshift+0x68>)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d909      	bls.n	8002ade <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ad2:	f023 0303 	bic.w	r3, r3, #3
 8002ad6:	1d1a      	adds	r2, r3, #4
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	659a      	str	r2, [r3, #88]	; 0x58
 8002adc:	e007      	b.n	8002aee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	aaaaaaab 	.word	0xaaaaaaab
 8002b04:	08005e68 	.word	0x08005e68

08002b08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d11f      	bne.n	8002b62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d856      	bhi.n	8002bd6 <DMA_CheckFifoParam+0xce>
 8002b28:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <DMA_CheckFifoParam+0x28>)
 8002b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2e:	bf00      	nop
 8002b30:	08002b41 	.word	0x08002b41
 8002b34:	08002b53 	.word	0x08002b53
 8002b38:	08002b41 	.word	0x08002b41
 8002b3c:	08002bd7 	.word	0x08002bd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d046      	beq.n	8002bda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b50:	e043      	b.n	8002bda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b5a:	d140      	bne.n	8002bde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b60:	e03d      	b.n	8002bde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6a:	d121      	bne.n	8002bb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d837      	bhi.n	8002be2 <DMA_CheckFifoParam+0xda>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <DMA_CheckFifoParam+0x70>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002b89 	.word	0x08002b89
 8002b7c:	08002b8f 	.word	0x08002b8f
 8002b80:	08002b89 	.word	0x08002b89
 8002b84:	08002ba1 	.word	0x08002ba1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8c:	e030      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d025      	beq.n	8002be6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9e:	e022      	b.n	8002be6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ba8:	d11f      	bne.n	8002bea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bae:	e01c      	b.n	8002bea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d903      	bls.n	8002bbe <DMA_CheckFifoParam+0xb6>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d003      	beq.n	8002bc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bbc:	e018      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc2:	e015      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00e      	beq.n	8002bee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd4:	e00b      	b.n	8002bee <DMA_CheckFifoParam+0xe6>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e00a      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e008      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bde:	bf00      	nop
 8002be0:	e006      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002be2:	bf00      	nop
 8002be4:	e004      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002be6:	bf00      	nop
 8002be8:	e002      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bea:	bf00      	nop
 8002bec:	e000      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bee:	bf00      	nop
    }
  } 
  
  return status; 
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop

08002c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	e177      	b.n	8002f0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	f040 8166 	bne.w	8002f06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d005      	beq.n	8002c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d130      	bne.n	8002cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c88:	2201      	movs	r2, #1
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 0201 	and.w	r2, r3, #1
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d017      	beq.n	8002cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d123      	bne.n	8002d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	08da      	lsrs	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3208      	adds	r2, #8
 8002d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	220f      	movs	r2, #15
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	08da      	lsrs	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3208      	adds	r2, #8
 8002d3e:	69b9      	ldr	r1, [r7, #24]
 8002d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	2203      	movs	r2, #3
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0203 	and.w	r2, r3, #3
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80c0 	beq.w	8002f06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	4b66      	ldr	r3, [pc, #408]	; (8002f24 <HAL_GPIO_Init+0x324>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	4a65      	ldr	r2, [pc, #404]	; (8002f24 <HAL_GPIO_Init+0x324>)
 8002d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d94:	6453      	str	r3, [r2, #68]	; 0x44
 8002d96:	4b63      	ldr	r3, [pc, #396]	; (8002f24 <HAL_GPIO_Init+0x324>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002da2:	4a61      	ldr	r2, [pc, #388]	; (8002f28 <HAL_GPIO_Init+0x328>)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	3302      	adds	r3, #2
 8002daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	220f      	movs	r2, #15
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a58      	ldr	r2, [pc, #352]	; (8002f2c <HAL_GPIO_Init+0x32c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d037      	beq.n	8002e3e <HAL_GPIO_Init+0x23e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a57      	ldr	r2, [pc, #348]	; (8002f30 <HAL_GPIO_Init+0x330>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d031      	beq.n	8002e3a <HAL_GPIO_Init+0x23a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a56      	ldr	r2, [pc, #344]	; (8002f34 <HAL_GPIO_Init+0x334>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d02b      	beq.n	8002e36 <HAL_GPIO_Init+0x236>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a55      	ldr	r2, [pc, #340]	; (8002f38 <HAL_GPIO_Init+0x338>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d025      	beq.n	8002e32 <HAL_GPIO_Init+0x232>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a54      	ldr	r2, [pc, #336]	; (8002f3c <HAL_GPIO_Init+0x33c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01f      	beq.n	8002e2e <HAL_GPIO_Init+0x22e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a53      	ldr	r2, [pc, #332]	; (8002f40 <HAL_GPIO_Init+0x340>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d019      	beq.n	8002e2a <HAL_GPIO_Init+0x22a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_GPIO_Init+0x344>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <HAL_GPIO_Init+0x226>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a51      	ldr	r2, [pc, #324]	; (8002f48 <HAL_GPIO_Init+0x348>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00d      	beq.n	8002e22 <HAL_GPIO_Init+0x222>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a50      	ldr	r2, [pc, #320]	; (8002f4c <HAL_GPIO_Init+0x34c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <HAL_GPIO_Init+0x21e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4f      	ldr	r2, [pc, #316]	; (8002f50 <HAL_GPIO_Init+0x350>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_GPIO_Init+0x21a>
 8002e16:	2309      	movs	r3, #9
 8002e18:	e012      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e1a:	230a      	movs	r3, #10
 8002e1c:	e010      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e1e:	2308      	movs	r3, #8
 8002e20:	e00e      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e22:	2307      	movs	r3, #7
 8002e24:	e00c      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e26:	2306      	movs	r3, #6
 8002e28:	e00a      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e2a:	2305      	movs	r3, #5
 8002e2c:	e008      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e2e:	2304      	movs	r3, #4
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e32:	2303      	movs	r3, #3
 8002e34:	e004      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e002      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	f002 0203 	and.w	r2, r2, #3
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	4093      	lsls	r3, r2
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e50:	4935      	ldr	r1, [pc, #212]	; (8002f28 <HAL_GPIO_Init+0x328>)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3302      	adds	r3, #2
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e82:	4a34      	ldr	r2, [pc, #208]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e88:	4b32      	ldr	r3, [pc, #200]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eac:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eb2:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed6:	4a1f      	ldr	r2, [pc, #124]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b0f      	cmp	r3, #15
 8002f10:	f67f ae84 	bls.w	8002c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	3724      	adds	r7, #36	; 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40020000 	.word	0x40020000
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40020c00 	.word	0x40020c00
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40021400 	.word	0x40021400
 8002f44:	40021800 	.word	0x40021800
 8002f48:	40021c00 	.word	0x40021c00
 8002f4c:	40022000 	.word	0x40022000
 8002f50:	40022400 	.word	0x40022400
 8002f54:	40013c00 	.word	0x40013c00

08002f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e267      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d075      	beq.n	8003062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f76:	4b88      	ldr	r3, [pc, #544]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d00c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f82:	4b85      	ldr	r3, [pc, #532]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d112      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8e:	4b82      	ldr	r3, [pc, #520]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f9a:	d10b      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	4b7e      	ldr	r3, [pc, #504]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d05b      	beq.n	8003060 <HAL_RCC_OscConfig+0x108>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d157      	bne.n	8003060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e242      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d106      	bne.n	8002fcc <HAL_RCC_OscConfig+0x74>
 8002fbe:	4b76      	ldr	r3, [pc, #472]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a75      	ldr	r2, [pc, #468]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e01d      	b.n	8003008 <HAL_RCC_OscConfig+0xb0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x98>
 8002fd6:	4b70      	ldr	r3, [pc, #448]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a6f      	ldr	r2, [pc, #444]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a6c      	ldr	r2, [pc, #432]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e00b      	b.n	8003008 <HAL_RCC_OscConfig+0xb0>
 8002ff0:	4b69      	ldr	r3, [pc, #420]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a68      	ldr	r2, [pc, #416]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b66      	ldr	r3, [pc, #408]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a65      	ldr	r2, [pc, #404]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8003002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d013      	beq.n	8003038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fe ff0c 	bl	8001e2c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003018:	f7fe ff08 	bl	8001e2c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e207      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302a:	4b5b      	ldr	r3, [pc, #364]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0xc0>
 8003036:	e014      	b.n	8003062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fef8 	bl	8001e2c <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003040:	f7fe fef4 	bl	8001e2c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e1f3      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003052:	4b51      	ldr	r3, [pc, #324]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0xe8>
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d063      	beq.n	8003136 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800306e:	4b4a      	ldr	r3, [pc, #296]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307a:	4b47      	ldr	r3, [pc, #284]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003082:	2b08      	cmp	r3, #8
 8003084:	d11c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003086:	4b44      	ldr	r3, [pc, #272]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003092:	4b41      	ldr	r3, [pc, #260]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_RCC_OscConfig+0x152>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e1c7      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030aa:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4937      	ldr	r1, [pc, #220]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030be:	e03a      	b.n	8003136 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d020      	beq.n	800310a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c8:	4b34      	ldr	r3, [pc, #208]	; (800319c <HAL_RCC_OscConfig+0x244>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fe fead 	bl	8001e2c <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d6:	f7fe fea9 	bl	8001e2c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e1a8      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e8:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4925      	ldr	r1, [pc, #148]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]
 8003108:	e015      	b.n	8003136 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310a:	4b24      	ldr	r3, [pc, #144]	; (800319c <HAL_RCC_OscConfig+0x244>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe fe8c 	bl	8001e2c <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003118:	f7fe fe88 	bl	8001e2c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e187      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312a:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d036      	beq.n	80031b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d016      	beq.n	8003178 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <HAL_RCC_OscConfig+0x248>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe fe6c 	bl	8001e2c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003158:	f7fe fe68 	bl	8001e2c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e167      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 800316c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x200>
 8003176:	e01b      	b.n	80031b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_RCC_OscConfig+0x248>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317e:	f7fe fe55 	bl	8001e2c <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003184:	e00e      	b.n	80031a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003186:	f7fe fe51 	bl	8001e2c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d907      	bls.n	80031a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e150      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
 8003198:	40023800 	.word	0x40023800
 800319c:	42470000 	.word	0x42470000
 80031a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a4:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80031a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ea      	bne.n	8003186 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 8097 	beq.w	80032ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c2:	4b81      	ldr	r3, [pc, #516]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10f      	bne.n	80031ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	4b7d      	ldr	r3, [pc, #500]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	4a7c      	ldr	r2, [pc, #496]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80031d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031dc:	6413      	str	r3, [r2, #64]	; 0x40
 80031de:	4b7a      	ldr	r3, [pc, #488]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ee:	4b77      	ldr	r3, [pc, #476]	; (80033cc <HAL_RCC_OscConfig+0x474>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d118      	bne.n	800322c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031fa:	4b74      	ldr	r3, [pc, #464]	; (80033cc <HAL_RCC_OscConfig+0x474>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a73      	ldr	r2, [pc, #460]	; (80033cc <HAL_RCC_OscConfig+0x474>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003206:	f7fe fe11 	bl	8001e2c <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320e:	f7fe fe0d 	bl	8001e2c <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e10c      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003220:	4b6a      	ldr	r3, [pc, #424]	; (80033cc <HAL_RCC_OscConfig+0x474>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x2ea>
 8003234:	4b64      	ldr	r3, [pc, #400]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a63      	ldr	r2, [pc, #396]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
 8003240:	e01c      	b.n	800327c <HAL_RCC_OscConfig+0x324>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b05      	cmp	r3, #5
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x30c>
 800324a:	4b5f      	ldr	r3, [pc, #380]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	4a5e      	ldr	r2, [pc, #376]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	6713      	str	r3, [r2, #112]	; 0x70
 8003256:	4b5c      	ldr	r3, [pc, #368]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a5b      	ldr	r2, [pc, #364]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6713      	str	r3, [r2, #112]	; 0x70
 8003262:	e00b      	b.n	800327c <HAL_RCC_OscConfig+0x324>
 8003264:	4b58      	ldr	r3, [pc, #352]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	4a57      	ldr	r2, [pc, #348]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	6713      	str	r3, [r2, #112]	; 0x70
 8003270:	4b55      	ldr	r3, [pc, #340]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	4a54      	ldr	r2, [pc, #336]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003276:	f023 0304 	bic.w	r3, r3, #4
 800327a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d015      	beq.n	80032b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe fdd2 	bl	8001e2c <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fe fdce 	bl	8001e2c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0cb      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a2:	4b49      	ldr	r3, [pc, #292]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ee      	beq.n	800328c <HAL_RCC_OscConfig+0x334>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b0:	f7fe fdbc 	bl	8001e2c <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b8:	f7fe fdb8 	bl	8001e2c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e0b5      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ce:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1ee      	bne.n	80032b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d105      	bne.n	80032ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e0:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	4a38      	ldr	r2, [pc, #224]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80032e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80a1 	beq.w	8003438 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032f6:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d05c      	beq.n	80033bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d141      	bne.n	800338e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330a:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <HAL_RCC_OscConfig+0x478>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe fd8c 	bl	8001e2c <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003318:	f7fe fd88 	bl	8001e2c <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e087      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332a:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	019b      	lsls	r3, r3, #6
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	3b01      	subs	r3, #1
 8003350:	041b      	lsls	r3, r3, #16
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	491b      	ldr	r1, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_RCC_OscConfig+0x478>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe fd61 	bl	8001e2c <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe fd5d 	bl	8001e2c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e05c      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x416>
 800338c:	e054      	b.n	8003438 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_RCC_OscConfig+0x478>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe fd4a 	bl	8001e2c <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe fd46 	bl	8001e2c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e045      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x444>
 80033ba:	e03d      	b.n	8003438 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e038      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40007000 	.word	0x40007000
 80033d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033d4:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_RCC_OscConfig+0x4ec>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d028      	beq.n	8003434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d121      	bne.n	8003434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d11a      	bne.n	8003434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003404:	4013      	ands	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800340a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800340c:	4293      	cmp	r3, r2
 800340e:	d111      	bne.n	8003434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	3b01      	subs	r3, #1
 800341e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d107      	bne.n	8003434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40023800 	.word	0x40023800

08003448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0cc      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800345c:	4b68      	ldr	r3, [pc, #416]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d90c      	bls.n	8003484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b65      	ldr	r3, [pc, #404]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b63      	ldr	r3, [pc, #396]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0b8      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800349c:	4b59      	ldr	r3, [pc, #356]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a58      	ldr	r2, [pc, #352]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b4:	4b53      	ldr	r3, [pc, #332]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a52      	ldr	r2, [pc, #328]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c0:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	494d      	ldr	r1, [pc, #308]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d044      	beq.n	8003568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d119      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e07f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003502:	2b03      	cmp	r3, #3
 8003504:	d107      	bne.n	8003516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003506:	4b3f      	ldr	r3, [pc, #252]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e06f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003516:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e067      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003526:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4934      	ldr	r1, [pc, #208]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003538:	f7fe fc78 	bl	8001e2c <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	e00a      	b.n	8003556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fe fc74 	bl	8001e2c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e04f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 020c 	and.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	429a      	cmp	r2, r3
 8003566:	d1eb      	bne.n	8003540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003568:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d20c      	bcs.n	8003590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e032      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800359c:	4b19      	ldr	r3, [pc, #100]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4916      	ldr	r1, [pc, #88]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	490e      	ldr	r1, [pc, #56]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ce:	f000 f821 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80035d2:	4602      	mov	r2, r0
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	490a      	ldr	r1, [pc, #40]	; (8003608 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	5ccb      	ldrb	r3, [r1, r3]
 80035e2:	fa22 f303 	lsr.w	r3, r2, r3
 80035e6:	4a09      	ldr	r2, [pc, #36]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_RCC_ClockConfig+0x1c8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe fbd8 	bl	8001da4 <HAL_InitTick>

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023c00 	.word	0x40023c00
 8003604:	40023800 	.word	0x40023800
 8003608:	08005e50 	.word	0x08005e50
 800360c:	20000020 	.word	0x20000020
 8003610:	20000024 	.word	0x20000024

08003614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003618:	b094      	sub	sp, #80	; 0x50
 800361a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	647b      	str	r3, [r7, #68]	; 0x44
 8003620:	2300      	movs	r3, #0
 8003622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003624:	2300      	movs	r3, #0
 8003626:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800362c:	4b79      	ldr	r3, [pc, #484]	; (8003814 <HAL_RCC_GetSysClockFreq+0x200>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d00d      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x40>
 8003638:	2b08      	cmp	r3, #8
 800363a:	f200 80e1 	bhi.w	8003800 <HAL_RCC_GetSysClockFreq+0x1ec>
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x34>
 8003642:	2b04      	cmp	r3, #4
 8003644:	d003      	beq.n	800364e <HAL_RCC_GetSysClockFreq+0x3a>
 8003646:	e0db      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4b73      	ldr	r3, [pc, #460]	; (8003818 <HAL_RCC_GetSysClockFreq+0x204>)
 800364a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800364c:	e0db      	b.n	8003806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800364e:	4b73      	ldr	r3, [pc, #460]	; (800381c <HAL_RCC_GetSysClockFreq+0x208>)
 8003650:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003652:	e0d8      	b.n	8003806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003654:	4b6f      	ldr	r3, [pc, #444]	; (8003814 <HAL_RCC_GetSysClockFreq+0x200>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800365c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800365e:	4b6d      	ldr	r3, [pc, #436]	; (8003814 <HAL_RCC_GetSysClockFreq+0x200>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d063      	beq.n	8003732 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366a:	4b6a      	ldr	r3, [pc, #424]	; (8003814 <HAL_RCC_GetSysClockFreq+0x200>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	099b      	lsrs	r3, r3, #6
 8003670:	2200      	movs	r2, #0
 8003672:	63bb      	str	r3, [r7, #56]	; 0x38
 8003674:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367c:	633b      	str	r3, [r7, #48]	; 0x30
 800367e:	2300      	movs	r3, #0
 8003680:	637b      	str	r3, [r7, #52]	; 0x34
 8003682:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003686:	4622      	mov	r2, r4
 8003688:	462b      	mov	r3, r5
 800368a:	f04f 0000 	mov.w	r0, #0
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	0159      	lsls	r1, r3, #5
 8003694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003698:	0150      	lsls	r0, r2, #5
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4621      	mov	r1, r4
 80036a0:	1a51      	subs	r1, r2, r1
 80036a2:	6139      	str	r1, [r7, #16]
 80036a4:	4629      	mov	r1, r5
 80036a6:	eb63 0301 	sbc.w	r3, r3, r1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036b8:	4659      	mov	r1, fp
 80036ba:	018b      	lsls	r3, r1, #6
 80036bc:	4651      	mov	r1, sl
 80036be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036c2:	4651      	mov	r1, sl
 80036c4:	018a      	lsls	r2, r1, #6
 80036c6:	4651      	mov	r1, sl
 80036c8:	ebb2 0801 	subs.w	r8, r2, r1
 80036cc:	4659      	mov	r1, fp
 80036ce:	eb63 0901 	sbc.w	r9, r3, r1
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036e6:	4690      	mov	r8, r2
 80036e8:	4699      	mov	r9, r3
 80036ea:	4623      	mov	r3, r4
 80036ec:	eb18 0303 	adds.w	r3, r8, r3
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	462b      	mov	r3, r5
 80036f4:	eb49 0303 	adc.w	r3, r9, r3
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003706:	4629      	mov	r1, r5
 8003708:	024b      	lsls	r3, r1, #9
 800370a:	4621      	mov	r1, r4
 800370c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003710:	4621      	mov	r1, r4
 8003712:	024a      	lsls	r2, r1, #9
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800371a:	2200      	movs	r2, #0
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28
 800371e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003720:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003724:	f7fd fa02 	bl	8000b2c <__aeabi_uldivmod>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4613      	mov	r3, r2
 800372e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003730:	e058      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003732:	4b38      	ldr	r3, [pc, #224]	; (8003814 <HAL_RCC_GetSysClockFreq+0x200>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	099b      	lsrs	r3, r3, #6
 8003738:	2200      	movs	r2, #0
 800373a:	4618      	mov	r0, r3
 800373c:	4611      	mov	r1, r2
 800373e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003742:	623b      	str	r3, [r7, #32]
 8003744:	2300      	movs	r3, #0
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
 8003748:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800374c:	4642      	mov	r2, r8
 800374e:	464b      	mov	r3, r9
 8003750:	f04f 0000 	mov.w	r0, #0
 8003754:	f04f 0100 	mov.w	r1, #0
 8003758:	0159      	lsls	r1, r3, #5
 800375a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800375e:	0150      	lsls	r0, r2, #5
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4641      	mov	r1, r8
 8003766:	ebb2 0a01 	subs.w	sl, r2, r1
 800376a:	4649      	mov	r1, r9
 800376c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800377c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003780:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003784:	ebb2 040a 	subs.w	r4, r2, sl
 8003788:	eb63 050b 	sbc.w	r5, r3, fp
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	00eb      	lsls	r3, r5, #3
 8003796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800379a:	00e2      	lsls	r2, r4, #3
 800379c:	4614      	mov	r4, r2
 800379e:	461d      	mov	r5, r3
 80037a0:	4643      	mov	r3, r8
 80037a2:	18e3      	adds	r3, r4, r3
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	464b      	mov	r3, r9
 80037a8:	eb45 0303 	adc.w	r3, r5, r3
 80037ac:	607b      	str	r3, [r7, #4]
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ba:	4629      	mov	r1, r5
 80037bc:	028b      	lsls	r3, r1, #10
 80037be:	4621      	mov	r1, r4
 80037c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037c4:	4621      	mov	r1, r4
 80037c6:	028a      	lsls	r2, r1, #10
 80037c8:	4610      	mov	r0, r2
 80037ca:	4619      	mov	r1, r3
 80037cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ce:	2200      	movs	r2, #0
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	61fa      	str	r2, [r7, #28]
 80037d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037d8:	f7fd f9a8 	bl	8000b2c <__aeabi_uldivmod>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4613      	mov	r3, r2
 80037e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	0c1b      	lsrs	r3, r3, #16
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	3301      	adds	r3, #1
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037fe:	e002      	b.n	8003806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCC_GetSysClockFreq+0x204>)
 8003802:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003808:	4618      	mov	r0, r3
 800380a:	3750      	adds	r7, #80	; 0x50
 800380c:	46bd      	mov	sp, r7
 800380e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800
 8003818:	00f42400 	.word	0x00f42400
 800381c:	007a1200 	.word	0x007a1200

08003820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <HAL_RCC_GetHCLKFreq+0x14>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000020 	.word	0x20000020

08003838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800383c:	f7ff fff0 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003840:	4602      	mov	r2, r0
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	0a9b      	lsrs	r3, r3, #10
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	4903      	ldr	r1, [pc, #12]	; (800385c <HAL_RCC_GetPCLK1Freq+0x24>)
 800384e:	5ccb      	ldrb	r3, [r1, r3]
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40023800 	.word	0x40023800
 800385c:	08005e60 	.word	0x08005e60

08003860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003864:	f7ff ffdc 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	0b5b      	lsrs	r3, r3, #13
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	4903      	ldr	r1, [pc, #12]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800387c:	4618      	mov	r0, r3
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40023800 	.word	0x40023800
 8003884:	08005e60 	.word	0x08005e60

08003888 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e097      	b.n	80039cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fe f90d 	bl	8001ad0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038cc:	f023 0307 	bic.w	r3, r3, #7
 80038d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	4619      	mov	r1, r3
 80038dc:	4610      	mov	r0, r2
 80038de:	f000 fa37 	bl	8003d50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	4313      	orrs	r3, r2
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003928:	f023 030c 	bic.w	r3, r3, #12
 800392c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	4313      	orrs	r3, r2
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	011a      	lsls	r2, r3, #4
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	031b      	lsls	r3, r3, #12
 8003958:	4313      	orrs	r3, r2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003966:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800396e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	4313      	orrs	r3, r2
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d110      	bne.n	8003a26 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d102      	bne.n	8003a10 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a0a:	7b7b      	ldrb	r3, [r7, #13]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d001      	beq.n	8003a14 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e069      	b.n	8003ae8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a24:	e031      	b.n	8003a8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d110      	bne.n	8003a4e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a2c:	7bbb      	ldrb	r3, [r7, #14]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d102      	bne.n	8003a38 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a32:	7b3b      	ldrb	r3, [r7, #12]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d001      	beq.n	8003a3c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e055      	b.n	8003ae8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a4c:	e01d      	b.n	8003a8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d108      	bne.n	8003a66 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a54:	7bbb      	ldrb	r3, [r7, #14]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d105      	bne.n	8003a66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a5a:	7b7b      	ldrb	r3, [r7, #13]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d102      	bne.n	8003a66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a60:	7b3b      	ldrb	r3, [r7, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d001      	beq.n	8003a6a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e03e      	b.n	8003ae8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_TIM_Encoder_Start+0xc4>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d008      	beq.n	8003aa8 <HAL_TIM_Encoder_Start+0xd4>
 8003a96:	e00f      	b.n	8003ab8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f9f5 	bl	8003e90 <TIM_CCxChannelCmd>
      break;
 8003aa6:	e016      	b.n	8003ad6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2201      	movs	r2, #1
 8003aae:	2104      	movs	r1, #4
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f9ed 	bl	8003e90 <TIM_CCxChannelCmd>
      break;
 8003ab6:	e00e      	b.n	8003ad6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2201      	movs	r2, #1
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 f9e5 	bl	8003e90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2201      	movs	r2, #1
 8003acc:	2104      	movs	r1, #4
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f9de 	bl	8003e90 <TIM_CCxChannelCmd>
      break;
 8003ad4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0201 	orr.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d122      	bne.n	8003b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d11b      	bne.n	8003b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f06f 0202 	mvn.w	r2, #2
 8003b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd f97c 	bl	8000e30 <HAL_TIM_IC_CaptureCallback>
 8003b38:	e005      	b.n	8003b46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8ea 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f8f1 	bl	8003d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d122      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d11b      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f06f 0204 	mvn.w	r2, #4
 8003b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd f952 	bl	8000e30 <HAL_TIM_IC_CaptureCallback>
 8003b8c:	e005      	b.n	8003b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8c0 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f8c7 	bl	8003d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d122      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d11b      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0208 	mvn.w	r2, #8
 8003bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fd f928 	bl	8000e30 <HAL_TIM_IC_CaptureCallback>
 8003be0:	e005      	b.n	8003bee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f896 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f89d 	bl	8003d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d122      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d11b      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0210 	mvn.w	r2, #16
 8003c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd f8fe 	bl	8000e30 <HAL_TIM_IC_CaptureCallback>
 8003c34:	e005      	b.n	8003c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f86c 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f873 	bl	8003d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d10e      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0201 	mvn.w	r2, #1
 8003c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f846 	bl	8003d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7e:	2b80      	cmp	r3, #128	; 0x80
 8003c80:	d10e      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8c:	2b80      	cmp	r3, #128	; 0x80
 8003c8e:	d107      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f9a4 	bl	8003fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b40      	cmp	r3, #64	; 0x40
 8003cac:	d10e      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d107      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f838 	bl	8003d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d107      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0220 	mvn.w	r2, #32
 8003cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f96e 	bl	8003fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a40      	ldr	r2, [pc, #256]	; (8003e64 <TIM_Base_SetConfig+0x114>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6e:	d00f      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a3d      	ldr	r2, [pc, #244]	; (8003e68 <TIM_Base_SetConfig+0x118>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a3c      	ldr	r2, [pc, #240]	; (8003e6c <TIM_Base_SetConfig+0x11c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a3b      	ldr	r2, [pc, #236]	; (8003e70 <TIM_Base_SetConfig+0x120>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a3a      	ldr	r2, [pc, #232]	; (8003e74 <TIM_Base_SetConfig+0x124>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d108      	bne.n	8003da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a2f      	ldr	r2, [pc, #188]	; (8003e64 <TIM_Base_SetConfig+0x114>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d02b      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db0:	d027      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a2c      	ldr	r2, [pc, #176]	; (8003e68 <TIM_Base_SetConfig+0x118>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d023      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a2b      	ldr	r2, [pc, #172]	; (8003e6c <TIM_Base_SetConfig+0x11c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d01f      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2a      	ldr	r2, [pc, #168]	; (8003e70 <TIM_Base_SetConfig+0x120>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01b      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a29      	ldr	r2, [pc, #164]	; (8003e74 <TIM_Base_SetConfig+0x124>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d017      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a28      	ldr	r2, [pc, #160]	; (8003e78 <TIM_Base_SetConfig+0x128>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a27      	ldr	r2, [pc, #156]	; (8003e7c <TIM_Base_SetConfig+0x12c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00f      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <TIM_Base_SetConfig+0x130>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00b      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <TIM_Base_SetConfig+0x134>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d007      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a24      	ldr	r2, [pc, #144]	; (8003e88 <TIM_Base_SetConfig+0x138>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a23      	ldr	r2, [pc, #140]	; (8003e8c <TIM_Base_SetConfig+0x13c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d108      	bne.n	8003e14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <TIM_Base_SetConfig+0x114>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d003      	beq.n	8003e48 <TIM_Base_SetConfig+0xf8>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a0c      	ldr	r2, [pc, #48]	; (8003e74 <TIM_Base_SetConfig+0x124>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d103      	bne.n	8003e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	615a      	str	r2, [r3, #20]
}
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40010000 	.word	0x40010000
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800
 8003e70:	40000c00 	.word	0x40000c00
 8003e74:	40010400 	.word	0x40010400
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800
 8003e84:	40001800 	.word	0x40001800
 8003e88:	40001c00 	.word	0x40001c00
 8003e8c:	40002000 	.word	0x40002000

08003e90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a1a      	ldr	r2, [r3, #32]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1a      	ldr	r2, [r3, #32]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	621a      	str	r2, [r3, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e05a      	b.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d022      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f40:	d01d      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d018      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1a      	ldr	r2, [pc, #104]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a15      	ldr	r2, [pc, #84]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d10c      	bne.n	8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	40010400 	.word	0x40010400
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	40001800 	.word	0x40001800

08003fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e03f      	b.n	800408e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fd fdbc 	bl	8001ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2224      	movs	r2, #36	; 0x24
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800403e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f829 	bl	8004098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695a      	ldr	r2, [r3, #20]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800409c:	b0c0      	sub	sp, #256	; 0x100
 800409e:	af00      	add	r7, sp, #0
 80040a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b4:	68d9      	ldr	r1, [r3, #12]
 80040b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	ea40 0301 	orr.w	r3, r0, r1
 80040c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040f0:	f021 010c 	bic.w	r1, r1, #12
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040fe:	430b      	orrs	r3, r1
 8004100:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800410e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004112:	6999      	ldr	r1, [r3, #24]
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	ea40 0301 	orr.w	r3, r0, r1
 800411e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	4b8f      	ldr	r3, [pc, #572]	; (8004364 <UART_SetConfig+0x2cc>)
 8004128:	429a      	cmp	r2, r3
 800412a:	d005      	beq.n	8004138 <UART_SetConfig+0xa0>
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b8d      	ldr	r3, [pc, #564]	; (8004368 <UART_SetConfig+0x2d0>)
 8004134:	429a      	cmp	r2, r3
 8004136:	d104      	bne.n	8004142 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7ff fb92 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 800413c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004140:	e003      	b.n	800414a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004142:	f7ff fb79 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 8004146:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004154:	f040 810c 	bne.w	8004370 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800415c:	2200      	movs	r2, #0
 800415e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004162:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004166:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800416a:	4622      	mov	r2, r4
 800416c:	462b      	mov	r3, r5
 800416e:	1891      	adds	r1, r2, r2
 8004170:	65b9      	str	r1, [r7, #88]	; 0x58
 8004172:	415b      	adcs	r3, r3
 8004174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004176:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800417a:	4621      	mov	r1, r4
 800417c:	eb12 0801 	adds.w	r8, r2, r1
 8004180:	4629      	mov	r1, r5
 8004182:	eb43 0901 	adc.w	r9, r3, r1
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800419a:	4690      	mov	r8, r2
 800419c:	4699      	mov	r9, r3
 800419e:	4623      	mov	r3, r4
 80041a0:	eb18 0303 	adds.w	r3, r8, r3
 80041a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041a8:	462b      	mov	r3, r5
 80041aa:	eb49 0303 	adc.w	r3, r9, r3
 80041ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041c6:	460b      	mov	r3, r1
 80041c8:	18db      	adds	r3, r3, r3
 80041ca:	653b      	str	r3, [r7, #80]	; 0x50
 80041cc:	4613      	mov	r3, r2
 80041ce:	eb42 0303 	adc.w	r3, r2, r3
 80041d2:	657b      	str	r3, [r7, #84]	; 0x54
 80041d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041dc:	f7fc fca6 	bl	8000b2c <__aeabi_uldivmod>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4b61      	ldr	r3, [pc, #388]	; (800436c <UART_SetConfig+0x2d4>)
 80041e6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	011c      	lsls	r4, r3, #4
 80041ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004200:	4642      	mov	r2, r8
 8004202:	464b      	mov	r3, r9
 8004204:	1891      	adds	r1, r2, r2
 8004206:	64b9      	str	r1, [r7, #72]	; 0x48
 8004208:	415b      	adcs	r3, r3
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800420c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004210:	4641      	mov	r1, r8
 8004212:	eb12 0a01 	adds.w	sl, r2, r1
 8004216:	4649      	mov	r1, r9
 8004218:	eb43 0b01 	adc.w	fp, r3, r1
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004228:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800422c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004230:	4692      	mov	sl, r2
 8004232:	469b      	mov	fp, r3
 8004234:	4643      	mov	r3, r8
 8004236:	eb1a 0303 	adds.w	r3, sl, r3
 800423a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800423e:	464b      	mov	r3, r9
 8004240:	eb4b 0303 	adc.w	r3, fp, r3
 8004244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004254:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004258:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800425c:	460b      	mov	r3, r1
 800425e:	18db      	adds	r3, r3, r3
 8004260:	643b      	str	r3, [r7, #64]	; 0x40
 8004262:	4613      	mov	r3, r2
 8004264:	eb42 0303 	adc.w	r3, r2, r3
 8004268:	647b      	str	r3, [r7, #68]	; 0x44
 800426a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800426e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004272:	f7fc fc5b 	bl	8000b2c <__aeabi_uldivmod>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4611      	mov	r1, r2
 800427c:	4b3b      	ldr	r3, [pc, #236]	; (800436c <UART_SetConfig+0x2d4>)
 800427e:	fba3 2301 	umull	r2, r3, r3, r1
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	2264      	movs	r2, #100	; 0x64
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	1acb      	subs	r3, r1, r3
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004292:	4b36      	ldr	r3, [pc, #216]	; (800436c <UART_SetConfig+0x2d4>)
 8004294:	fba3 2302 	umull	r2, r3, r3, r2
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042a0:	441c      	add	r4, r3
 80042a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042b4:	4642      	mov	r2, r8
 80042b6:	464b      	mov	r3, r9
 80042b8:	1891      	adds	r1, r2, r2
 80042ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80042bc:	415b      	adcs	r3, r3
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042c4:	4641      	mov	r1, r8
 80042c6:	1851      	adds	r1, r2, r1
 80042c8:	6339      	str	r1, [r7, #48]	; 0x30
 80042ca:	4649      	mov	r1, r9
 80042cc:	414b      	adcs	r3, r1
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042dc:	4659      	mov	r1, fp
 80042de:	00cb      	lsls	r3, r1, #3
 80042e0:	4651      	mov	r1, sl
 80042e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042e6:	4651      	mov	r1, sl
 80042e8:	00ca      	lsls	r2, r1, #3
 80042ea:	4610      	mov	r0, r2
 80042ec:	4619      	mov	r1, r3
 80042ee:	4603      	mov	r3, r0
 80042f0:	4642      	mov	r2, r8
 80042f2:	189b      	adds	r3, r3, r2
 80042f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042f8:	464b      	mov	r3, r9
 80042fa:	460a      	mov	r2, r1
 80042fc:	eb42 0303 	adc.w	r3, r2, r3
 8004300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004310:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004314:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004318:	460b      	mov	r3, r1
 800431a:	18db      	adds	r3, r3, r3
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
 800431e:	4613      	mov	r3, r2
 8004320:	eb42 0303 	adc.w	r3, r2, r3
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800432a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800432e:	f7fc fbfd 	bl	8000b2c <__aeabi_uldivmod>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <UART_SetConfig+0x2d4>)
 8004338:	fba3 1302 	umull	r1, r3, r3, r2
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	2164      	movs	r1, #100	; 0x64
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	3332      	adds	r3, #50	; 0x32
 800434a:	4a08      	ldr	r2, [pc, #32]	; (800436c <UART_SetConfig+0x2d4>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	f003 0207 	and.w	r2, r3, #7
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4422      	add	r2, r4
 800435e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004360:	e105      	b.n	800456e <UART_SetConfig+0x4d6>
 8004362:	bf00      	nop
 8004364:	40011000 	.word	0x40011000
 8004368:	40011400 	.word	0x40011400
 800436c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004374:	2200      	movs	r2, #0
 8004376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800437a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800437e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004382:	4642      	mov	r2, r8
 8004384:	464b      	mov	r3, r9
 8004386:	1891      	adds	r1, r2, r2
 8004388:	6239      	str	r1, [r7, #32]
 800438a:	415b      	adcs	r3, r3
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
 800438e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004392:	4641      	mov	r1, r8
 8004394:	1854      	adds	r4, r2, r1
 8004396:	4649      	mov	r1, r9
 8004398:	eb43 0501 	adc.w	r5, r3, r1
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	00eb      	lsls	r3, r5, #3
 80043a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043aa:	00e2      	lsls	r2, r4, #3
 80043ac:	4614      	mov	r4, r2
 80043ae:	461d      	mov	r5, r3
 80043b0:	4643      	mov	r3, r8
 80043b2:	18e3      	adds	r3, r4, r3
 80043b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043b8:	464b      	mov	r3, r9
 80043ba:	eb45 0303 	adc.w	r3, r5, r3
 80043be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043de:	4629      	mov	r1, r5
 80043e0:	008b      	lsls	r3, r1, #2
 80043e2:	4621      	mov	r1, r4
 80043e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043e8:	4621      	mov	r1, r4
 80043ea:	008a      	lsls	r2, r1, #2
 80043ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043f0:	f7fc fb9c 	bl	8000b2c <__aeabi_uldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4b60      	ldr	r3, [pc, #384]	; (800457c <UART_SetConfig+0x4e4>)
 80043fa:	fba3 2302 	umull	r2, r3, r3, r2
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	011c      	lsls	r4, r3, #4
 8004402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004406:	2200      	movs	r2, #0
 8004408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800440c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004410:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004414:	4642      	mov	r2, r8
 8004416:	464b      	mov	r3, r9
 8004418:	1891      	adds	r1, r2, r2
 800441a:	61b9      	str	r1, [r7, #24]
 800441c:	415b      	adcs	r3, r3
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004424:	4641      	mov	r1, r8
 8004426:	1851      	adds	r1, r2, r1
 8004428:	6139      	str	r1, [r7, #16]
 800442a:	4649      	mov	r1, r9
 800442c:	414b      	adcs	r3, r1
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800443c:	4659      	mov	r1, fp
 800443e:	00cb      	lsls	r3, r1, #3
 8004440:	4651      	mov	r1, sl
 8004442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004446:	4651      	mov	r1, sl
 8004448:	00ca      	lsls	r2, r1, #3
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	4603      	mov	r3, r0
 8004450:	4642      	mov	r2, r8
 8004452:	189b      	adds	r3, r3, r2
 8004454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004458:	464b      	mov	r3, r9
 800445a:	460a      	mov	r2, r1
 800445c:	eb42 0303 	adc.w	r3, r2, r3
 8004460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	67bb      	str	r3, [r7, #120]	; 0x78
 800446e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800447c:	4649      	mov	r1, r9
 800447e:	008b      	lsls	r3, r1, #2
 8004480:	4641      	mov	r1, r8
 8004482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004486:	4641      	mov	r1, r8
 8004488:	008a      	lsls	r2, r1, #2
 800448a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800448e:	f7fc fb4d 	bl	8000b2c <__aeabi_uldivmod>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4b39      	ldr	r3, [pc, #228]	; (800457c <UART_SetConfig+0x4e4>)
 8004498:	fba3 1302 	umull	r1, r3, r3, r2
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	2164      	movs	r1, #100	; 0x64
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	3332      	adds	r3, #50	; 0x32
 80044aa:	4a34      	ldr	r2, [pc, #208]	; (800457c <UART_SetConfig+0x4e4>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b6:	441c      	add	r4, r3
 80044b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044bc:	2200      	movs	r2, #0
 80044be:	673b      	str	r3, [r7, #112]	; 0x70
 80044c0:	677a      	str	r2, [r7, #116]	; 0x74
 80044c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044c6:	4642      	mov	r2, r8
 80044c8:	464b      	mov	r3, r9
 80044ca:	1891      	adds	r1, r2, r2
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	415b      	adcs	r3, r3
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d6:	4641      	mov	r1, r8
 80044d8:	1851      	adds	r1, r2, r1
 80044da:	6039      	str	r1, [r7, #0]
 80044dc:	4649      	mov	r1, r9
 80044de:	414b      	adcs	r3, r1
 80044e0:	607b      	str	r3, [r7, #4]
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044ee:	4659      	mov	r1, fp
 80044f0:	00cb      	lsls	r3, r1, #3
 80044f2:	4651      	mov	r1, sl
 80044f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f8:	4651      	mov	r1, sl
 80044fa:	00ca      	lsls	r2, r1, #3
 80044fc:	4610      	mov	r0, r2
 80044fe:	4619      	mov	r1, r3
 8004500:	4603      	mov	r3, r0
 8004502:	4642      	mov	r2, r8
 8004504:	189b      	adds	r3, r3, r2
 8004506:	66bb      	str	r3, [r7, #104]	; 0x68
 8004508:	464b      	mov	r3, r9
 800450a:	460a      	mov	r2, r1
 800450c:	eb42 0303 	adc.w	r3, r2, r3
 8004510:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	663b      	str	r3, [r7, #96]	; 0x60
 800451c:	667a      	str	r2, [r7, #100]	; 0x64
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800452a:	4649      	mov	r1, r9
 800452c:	008b      	lsls	r3, r1, #2
 800452e:	4641      	mov	r1, r8
 8004530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004534:	4641      	mov	r1, r8
 8004536:	008a      	lsls	r2, r1, #2
 8004538:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800453c:	f7fc faf6 	bl	8000b2c <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4b0d      	ldr	r3, [pc, #52]	; (800457c <UART_SetConfig+0x4e4>)
 8004546:	fba3 1302 	umull	r1, r3, r3, r2
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2164      	movs	r1, #100	; 0x64
 800454e:	fb01 f303 	mul.w	r3, r1, r3
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	3332      	adds	r3, #50	; 0x32
 8004558:	4a08      	ldr	r2, [pc, #32]	; (800457c <UART_SetConfig+0x4e4>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	f003 020f 	and.w	r2, r3, #15
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4422      	add	r2, r4
 800456c:	609a      	str	r2, [r3, #8]
}
 800456e:	bf00      	nop
 8004570:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004574:	46bd      	mov	sp, r7
 8004576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457a:	bf00      	nop
 800457c:	51eb851f 	.word	0x51eb851f

08004580 <__libc_init_array>:
 8004580:	b570      	push	{r4, r5, r6, lr}
 8004582:	4d0d      	ldr	r5, [pc, #52]	; (80045b8 <__libc_init_array+0x38>)
 8004584:	4c0d      	ldr	r4, [pc, #52]	; (80045bc <__libc_init_array+0x3c>)
 8004586:	1b64      	subs	r4, r4, r5
 8004588:	10a4      	asrs	r4, r4, #2
 800458a:	2600      	movs	r6, #0
 800458c:	42a6      	cmp	r6, r4
 800458e:	d109      	bne.n	80045a4 <__libc_init_array+0x24>
 8004590:	4d0b      	ldr	r5, [pc, #44]	; (80045c0 <__libc_init_array+0x40>)
 8004592:	4c0c      	ldr	r4, [pc, #48]	; (80045c4 <__libc_init_array+0x44>)
 8004594:	f001 fc4e 	bl	8005e34 <_init>
 8004598:	1b64      	subs	r4, r4, r5
 800459a:	10a4      	asrs	r4, r4, #2
 800459c:	2600      	movs	r6, #0
 800459e:	42a6      	cmp	r6, r4
 80045a0:	d105      	bne.n	80045ae <__libc_init_array+0x2e>
 80045a2:	bd70      	pop	{r4, r5, r6, pc}
 80045a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a8:	4798      	blx	r3
 80045aa:	3601      	adds	r6, #1
 80045ac:	e7ee      	b.n	800458c <__libc_init_array+0xc>
 80045ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b2:	4798      	blx	r3
 80045b4:	3601      	adds	r6, #1
 80045b6:	e7f2      	b.n	800459e <__libc_init_array+0x1e>
 80045b8:	08006090 	.word	0x08006090
 80045bc:	08006090 	.word	0x08006090
 80045c0:	08006090 	.word	0x08006090
 80045c4:	08006094 	.word	0x08006094

080045c8 <memset>:
 80045c8:	4402      	add	r2, r0
 80045ca:	4603      	mov	r3, r0
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d100      	bne.n	80045d2 <memset+0xa>
 80045d0:	4770      	bx	lr
 80045d2:	f803 1b01 	strb.w	r1, [r3], #1
 80045d6:	e7f9      	b.n	80045cc <memset+0x4>

080045d8 <atan>:
 80045d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045dc:	ec55 4b10 	vmov	r4, r5, d0
 80045e0:	4bc3      	ldr	r3, [pc, #780]	; (80048f0 <atan+0x318>)
 80045e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80045e6:	429e      	cmp	r6, r3
 80045e8:	46ab      	mov	fp, r5
 80045ea:	dd18      	ble.n	800461e <atan+0x46>
 80045ec:	4bc1      	ldr	r3, [pc, #772]	; (80048f4 <atan+0x31c>)
 80045ee:	429e      	cmp	r6, r3
 80045f0:	dc01      	bgt.n	80045f6 <atan+0x1e>
 80045f2:	d109      	bne.n	8004608 <atan+0x30>
 80045f4:	b144      	cbz	r4, 8004608 <atan+0x30>
 80045f6:	4622      	mov	r2, r4
 80045f8:	462b      	mov	r3, r5
 80045fa:	4620      	mov	r0, r4
 80045fc:	4629      	mov	r1, r5
 80045fe:	f7fb fdfd 	bl	80001fc <__adddf3>
 8004602:	4604      	mov	r4, r0
 8004604:	460d      	mov	r5, r1
 8004606:	e006      	b.n	8004616 <atan+0x3e>
 8004608:	f1bb 0f00 	cmp.w	fp, #0
 800460c:	f300 8131 	bgt.w	8004872 <atan+0x29a>
 8004610:	a59b      	add	r5, pc, #620	; (adr r5, 8004880 <atan+0x2a8>)
 8004612:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004616:	ec45 4b10 	vmov	d0, r4, r5
 800461a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461e:	4bb6      	ldr	r3, [pc, #728]	; (80048f8 <atan+0x320>)
 8004620:	429e      	cmp	r6, r3
 8004622:	dc14      	bgt.n	800464e <atan+0x76>
 8004624:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004628:	429e      	cmp	r6, r3
 800462a:	dc0d      	bgt.n	8004648 <atan+0x70>
 800462c:	a396      	add	r3, pc, #600	; (adr r3, 8004888 <atan+0x2b0>)
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	ee10 0a10 	vmov	r0, s0
 8004636:	4629      	mov	r1, r5
 8004638:	f7fb fde0 	bl	80001fc <__adddf3>
 800463c:	4baf      	ldr	r3, [pc, #700]	; (80048fc <atan+0x324>)
 800463e:	2200      	movs	r2, #0
 8004640:	f7fc fa22 	bl	8000a88 <__aeabi_dcmpgt>
 8004644:	2800      	cmp	r0, #0
 8004646:	d1e6      	bne.n	8004616 <atan+0x3e>
 8004648:	f04f 3aff 	mov.w	sl, #4294967295
 800464c:	e02b      	b.n	80046a6 <atan+0xce>
 800464e:	f000 f963 	bl	8004918 <fabs>
 8004652:	4bab      	ldr	r3, [pc, #684]	; (8004900 <atan+0x328>)
 8004654:	429e      	cmp	r6, r3
 8004656:	ec55 4b10 	vmov	r4, r5, d0
 800465a:	f300 80bf 	bgt.w	80047dc <atan+0x204>
 800465e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004662:	429e      	cmp	r6, r3
 8004664:	f300 80a0 	bgt.w	80047a8 <atan+0x1d0>
 8004668:	ee10 2a10 	vmov	r2, s0
 800466c:	ee10 0a10 	vmov	r0, s0
 8004670:	462b      	mov	r3, r5
 8004672:	4629      	mov	r1, r5
 8004674:	f7fb fdc2 	bl	80001fc <__adddf3>
 8004678:	4ba0      	ldr	r3, [pc, #640]	; (80048fc <atan+0x324>)
 800467a:	2200      	movs	r2, #0
 800467c:	f7fb fdbc 	bl	80001f8 <__aeabi_dsub>
 8004680:	2200      	movs	r2, #0
 8004682:	4606      	mov	r6, r0
 8004684:	460f      	mov	r7, r1
 8004686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800468a:	4620      	mov	r0, r4
 800468c:	4629      	mov	r1, r5
 800468e:	f7fb fdb5 	bl	80001fc <__adddf3>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4630      	mov	r0, r6
 8004698:	4639      	mov	r1, r7
 800469a:	f7fc f88f 	bl	80007bc <__aeabi_ddiv>
 800469e:	f04f 0a00 	mov.w	sl, #0
 80046a2:	4604      	mov	r4, r0
 80046a4:	460d      	mov	r5, r1
 80046a6:	4622      	mov	r2, r4
 80046a8:	462b      	mov	r3, r5
 80046aa:	4620      	mov	r0, r4
 80046ac:	4629      	mov	r1, r5
 80046ae:	f7fb ff5b 	bl	8000568 <__aeabi_dmul>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4680      	mov	r8, r0
 80046b8:	4689      	mov	r9, r1
 80046ba:	f7fb ff55 	bl	8000568 <__aeabi_dmul>
 80046be:	a374      	add	r3, pc, #464	; (adr r3, 8004890 <atan+0x2b8>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	4606      	mov	r6, r0
 80046c6:	460f      	mov	r7, r1
 80046c8:	f7fb ff4e 	bl	8000568 <__aeabi_dmul>
 80046cc:	a372      	add	r3, pc, #456	; (adr r3, 8004898 <atan+0x2c0>)
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	f7fb fd93 	bl	80001fc <__adddf3>
 80046d6:	4632      	mov	r2, r6
 80046d8:	463b      	mov	r3, r7
 80046da:	f7fb ff45 	bl	8000568 <__aeabi_dmul>
 80046de:	a370      	add	r3, pc, #448	; (adr r3, 80048a0 <atan+0x2c8>)
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	f7fb fd8a 	bl	80001fc <__adddf3>
 80046e8:	4632      	mov	r2, r6
 80046ea:	463b      	mov	r3, r7
 80046ec:	f7fb ff3c 	bl	8000568 <__aeabi_dmul>
 80046f0:	a36d      	add	r3, pc, #436	; (adr r3, 80048a8 <atan+0x2d0>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f7fb fd81 	bl	80001fc <__adddf3>
 80046fa:	4632      	mov	r2, r6
 80046fc:	463b      	mov	r3, r7
 80046fe:	f7fb ff33 	bl	8000568 <__aeabi_dmul>
 8004702:	a36b      	add	r3, pc, #428	; (adr r3, 80048b0 <atan+0x2d8>)
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f7fb fd78 	bl	80001fc <__adddf3>
 800470c:	4632      	mov	r2, r6
 800470e:	463b      	mov	r3, r7
 8004710:	f7fb ff2a 	bl	8000568 <__aeabi_dmul>
 8004714:	a368      	add	r3, pc, #416	; (adr r3, 80048b8 <atan+0x2e0>)
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f7fb fd6f 	bl	80001fc <__adddf3>
 800471e:	4642      	mov	r2, r8
 8004720:	464b      	mov	r3, r9
 8004722:	f7fb ff21 	bl	8000568 <__aeabi_dmul>
 8004726:	a366      	add	r3, pc, #408	; (adr r3, 80048c0 <atan+0x2e8>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	4680      	mov	r8, r0
 800472e:	4689      	mov	r9, r1
 8004730:	4630      	mov	r0, r6
 8004732:	4639      	mov	r1, r7
 8004734:	f7fb ff18 	bl	8000568 <__aeabi_dmul>
 8004738:	a363      	add	r3, pc, #396	; (adr r3, 80048c8 <atan+0x2f0>)
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f7fb fd5b 	bl	80001f8 <__aeabi_dsub>
 8004742:	4632      	mov	r2, r6
 8004744:	463b      	mov	r3, r7
 8004746:	f7fb ff0f 	bl	8000568 <__aeabi_dmul>
 800474a:	a361      	add	r3, pc, #388	; (adr r3, 80048d0 <atan+0x2f8>)
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f7fb fd52 	bl	80001f8 <__aeabi_dsub>
 8004754:	4632      	mov	r2, r6
 8004756:	463b      	mov	r3, r7
 8004758:	f7fb ff06 	bl	8000568 <__aeabi_dmul>
 800475c:	a35e      	add	r3, pc, #376	; (adr r3, 80048d8 <atan+0x300>)
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f7fb fd49 	bl	80001f8 <__aeabi_dsub>
 8004766:	4632      	mov	r2, r6
 8004768:	463b      	mov	r3, r7
 800476a:	f7fb fefd 	bl	8000568 <__aeabi_dmul>
 800476e:	a35c      	add	r3, pc, #368	; (adr r3, 80048e0 <atan+0x308>)
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f7fb fd40 	bl	80001f8 <__aeabi_dsub>
 8004778:	4632      	mov	r2, r6
 800477a:	463b      	mov	r3, r7
 800477c:	f7fb fef4 	bl	8000568 <__aeabi_dmul>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4640      	mov	r0, r8
 8004786:	4649      	mov	r1, r9
 8004788:	f7fb fd38 	bl	80001fc <__adddf3>
 800478c:	4622      	mov	r2, r4
 800478e:	462b      	mov	r3, r5
 8004790:	f7fb feea 	bl	8000568 <__aeabi_dmul>
 8004794:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	d14b      	bne.n	8004836 <atan+0x25e>
 800479e:	4620      	mov	r0, r4
 80047a0:	4629      	mov	r1, r5
 80047a2:	f7fb fd29 	bl	80001f8 <__aeabi_dsub>
 80047a6:	e72c      	b.n	8004602 <atan+0x2a>
 80047a8:	ee10 0a10 	vmov	r0, s0
 80047ac:	4b53      	ldr	r3, [pc, #332]	; (80048fc <atan+0x324>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	4629      	mov	r1, r5
 80047b2:	f7fb fd21 	bl	80001f8 <__aeabi_dsub>
 80047b6:	4b51      	ldr	r3, [pc, #324]	; (80048fc <atan+0x324>)
 80047b8:	4606      	mov	r6, r0
 80047ba:	460f      	mov	r7, r1
 80047bc:	2200      	movs	r2, #0
 80047be:	4620      	mov	r0, r4
 80047c0:	4629      	mov	r1, r5
 80047c2:	f7fb fd1b 	bl	80001fc <__adddf3>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4630      	mov	r0, r6
 80047cc:	4639      	mov	r1, r7
 80047ce:	f7fb fff5 	bl	80007bc <__aeabi_ddiv>
 80047d2:	f04f 0a01 	mov.w	sl, #1
 80047d6:	4604      	mov	r4, r0
 80047d8:	460d      	mov	r5, r1
 80047da:	e764      	b.n	80046a6 <atan+0xce>
 80047dc:	4b49      	ldr	r3, [pc, #292]	; (8004904 <atan+0x32c>)
 80047de:	429e      	cmp	r6, r3
 80047e0:	da1d      	bge.n	800481e <atan+0x246>
 80047e2:	ee10 0a10 	vmov	r0, s0
 80047e6:	4b48      	ldr	r3, [pc, #288]	; (8004908 <atan+0x330>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	4629      	mov	r1, r5
 80047ec:	f7fb fd04 	bl	80001f8 <__aeabi_dsub>
 80047f0:	4b45      	ldr	r3, [pc, #276]	; (8004908 <atan+0x330>)
 80047f2:	4606      	mov	r6, r0
 80047f4:	460f      	mov	r7, r1
 80047f6:	2200      	movs	r2, #0
 80047f8:	4620      	mov	r0, r4
 80047fa:	4629      	mov	r1, r5
 80047fc:	f7fb feb4 	bl	8000568 <__aeabi_dmul>
 8004800:	4b3e      	ldr	r3, [pc, #248]	; (80048fc <atan+0x324>)
 8004802:	2200      	movs	r2, #0
 8004804:	f7fb fcfa 	bl	80001fc <__adddf3>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4630      	mov	r0, r6
 800480e:	4639      	mov	r1, r7
 8004810:	f7fb ffd4 	bl	80007bc <__aeabi_ddiv>
 8004814:	f04f 0a02 	mov.w	sl, #2
 8004818:	4604      	mov	r4, r0
 800481a:	460d      	mov	r5, r1
 800481c:	e743      	b.n	80046a6 <atan+0xce>
 800481e:	462b      	mov	r3, r5
 8004820:	ee10 2a10 	vmov	r2, s0
 8004824:	4939      	ldr	r1, [pc, #228]	; (800490c <atan+0x334>)
 8004826:	2000      	movs	r0, #0
 8004828:	f7fb ffc8 	bl	80007bc <__aeabi_ddiv>
 800482c:	f04f 0a03 	mov.w	sl, #3
 8004830:	4604      	mov	r4, r0
 8004832:	460d      	mov	r5, r1
 8004834:	e737      	b.n	80046a6 <atan+0xce>
 8004836:	4b36      	ldr	r3, [pc, #216]	; (8004910 <atan+0x338>)
 8004838:	4e36      	ldr	r6, [pc, #216]	; (8004914 <atan+0x33c>)
 800483a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800483e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8004842:	e9da 2300 	ldrd	r2, r3, [sl]
 8004846:	f7fb fcd7 	bl	80001f8 <__aeabi_dsub>
 800484a:	4622      	mov	r2, r4
 800484c:	462b      	mov	r3, r5
 800484e:	f7fb fcd3 	bl	80001f8 <__aeabi_dsub>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	e9d6 0100 	ldrd	r0, r1, [r6]
 800485a:	f7fb fccd 	bl	80001f8 <__aeabi_dsub>
 800485e:	f1bb 0f00 	cmp.w	fp, #0
 8004862:	4604      	mov	r4, r0
 8004864:	460d      	mov	r5, r1
 8004866:	f6bf aed6 	bge.w	8004616 <atan+0x3e>
 800486a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800486e:	461d      	mov	r5, r3
 8004870:	e6d1      	b.n	8004616 <atan+0x3e>
 8004872:	a51d      	add	r5, pc, #116	; (adr r5, 80048e8 <atan+0x310>)
 8004874:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004878:	e6cd      	b.n	8004616 <atan+0x3e>
 800487a:	bf00      	nop
 800487c:	f3af 8000 	nop.w
 8004880:	54442d18 	.word	0x54442d18
 8004884:	bff921fb 	.word	0xbff921fb
 8004888:	8800759c 	.word	0x8800759c
 800488c:	7e37e43c 	.word	0x7e37e43c
 8004890:	e322da11 	.word	0xe322da11
 8004894:	3f90ad3a 	.word	0x3f90ad3a
 8004898:	24760deb 	.word	0x24760deb
 800489c:	3fa97b4b 	.word	0x3fa97b4b
 80048a0:	a0d03d51 	.word	0xa0d03d51
 80048a4:	3fb10d66 	.word	0x3fb10d66
 80048a8:	c54c206e 	.word	0xc54c206e
 80048ac:	3fb745cd 	.word	0x3fb745cd
 80048b0:	920083ff 	.word	0x920083ff
 80048b4:	3fc24924 	.word	0x3fc24924
 80048b8:	5555550d 	.word	0x5555550d
 80048bc:	3fd55555 	.word	0x3fd55555
 80048c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80048c4:	bfa2b444 	.word	0xbfa2b444
 80048c8:	52defd9a 	.word	0x52defd9a
 80048cc:	3fadde2d 	.word	0x3fadde2d
 80048d0:	af749a6d 	.word	0xaf749a6d
 80048d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80048d8:	fe231671 	.word	0xfe231671
 80048dc:	3fbc71c6 	.word	0x3fbc71c6
 80048e0:	9998ebc4 	.word	0x9998ebc4
 80048e4:	3fc99999 	.word	0x3fc99999
 80048e8:	54442d18 	.word	0x54442d18
 80048ec:	3ff921fb 	.word	0x3ff921fb
 80048f0:	440fffff 	.word	0x440fffff
 80048f4:	7ff00000 	.word	0x7ff00000
 80048f8:	3fdbffff 	.word	0x3fdbffff
 80048fc:	3ff00000 	.word	0x3ff00000
 8004900:	3ff2ffff 	.word	0x3ff2ffff
 8004904:	40038000 	.word	0x40038000
 8004908:	3ff80000 	.word	0x3ff80000
 800490c:	bff00000 	.word	0xbff00000
 8004910:	08005e90 	.word	0x08005e90
 8004914:	08005e70 	.word	0x08005e70

08004918 <fabs>:
 8004918:	ec51 0b10 	vmov	r0, r1, d0
 800491c:	ee10 2a10 	vmov	r2, s0
 8004920:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004924:	ec43 2b10 	vmov	d0, r2, r3
 8004928:	4770      	bx	lr
 800492a:	0000      	movs	r0, r0
 800492c:	0000      	movs	r0, r0
	...

08004930 <sin>:
 8004930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004932:	ec53 2b10 	vmov	r2, r3, d0
 8004936:	4828      	ldr	r0, [pc, #160]	; (80049d8 <sin+0xa8>)
 8004938:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800493c:	4281      	cmp	r1, r0
 800493e:	dc07      	bgt.n	8004950 <sin+0x20>
 8004940:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80049d0 <sin+0xa0>
 8004944:	2000      	movs	r0, #0
 8004946:	b005      	add	sp, #20
 8004948:	f85d eb04 	ldr.w	lr, [sp], #4
 800494c:	f000 bea0 	b.w	8005690 <__kernel_sin>
 8004950:	4822      	ldr	r0, [pc, #136]	; (80049dc <sin+0xac>)
 8004952:	4281      	cmp	r1, r0
 8004954:	dd09      	ble.n	800496a <sin+0x3a>
 8004956:	ee10 0a10 	vmov	r0, s0
 800495a:	4619      	mov	r1, r3
 800495c:	f7fb fc4c 	bl	80001f8 <__aeabi_dsub>
 8004960:	ec41 0b10 	vmov	d0, r0, r1
 8004964:	b005      	add	sp, #20
 8004966:	f85d fb04 	ldr.w	pc, [sp], #4
 800496a:	4668      	mov	r0, sp
 800496c:	f000 f86c 	bl	8004a48 <__ieee754_rem_pio2>
 8004970:	f000 0003 	and.w	r0, r0, #3
 8004974:	2801      	cmp	r0, #1
 8004976:	d00c      	beq.n	8004992 <sin+0x62>
 8004978:	2802      	cmp	r0, #2
 800497a:	d011      	beq.n	80049a0 <sin+0x70>
 800497c:	b9f0      	cbnz	r0, 80049bc <sin+0x8c>
 800497e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004982:	ed9d 0b00 	vldr	d0, [sp]
 8004986:	2001      	movs	r0, #1
 8004988:	f000 fe82 	bl	8005690 <__kernel_sin>
 800498c:	ec51 0b10 	vmov	r0, r1, d0
 8004990:	e7e6      	b.n	8004960 <sin+0x30>
 8004992:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004996:	ed9d 0b00 	vldr	d0, [sp]
 800499a:	f000 fa61 	bl	8004e60 <__kernel_cos>
 800499e:	e7f5      	b.n	800498c <sin+0x5c>
 80049a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80049a4:	ed9d 0b00 	vldr	d0, [sp]
 80049a8:	2001      	movs	r0, #1
 80049aa:	f000 fe71 	bl	8005690 <__kernel_sin>
 80049ae:	ec53 2b10 	vmov	r2, r3, d0
 80049b2:	ee10 0a10 	vmov	r0, s0
 80049b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80049ba:	e7d1      	b.n	8004960 <sin+0x30>
 80049bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80049c0:	ed9d 0b00 	vldr	d0, [sp]
 80049c4:	f000 fa4c 	bl	8004e60 <__kernel_cos>
 80049c8:	e7f1      	b.n	80049ae <sin+0x7e>
 80049ca:	bf00      	nop
 80049cc:	f3af 8000 	nop.w
	...
 80049d8:	3fe921fb 	.word	0x3fe921fb
 80049dc:	7fefffff 	.word	0x7fefffff

080049e0 <tan>:
 80049e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049e2:	ec53 2b10 	vmov	r2, r3, d0
 80049e6:	4816      	ldr	r0, [pc, #88]	; (8004a40 <tan+0x60>)
 80049e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80049ec:	4281      	cmp	r1, r0
 80049ee:	dc07      	bgt.n	8004a00 <tan+0x20>
 80049f0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8004a38 <tan+0x58>
 80049f4:	2001      	movs	r0, #1
 80049f6:	b005      	add	sp, #20
 80049f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80049fc:	f000 bf08 	b.w	8005810 <__kernel_tan>
 8004a00:	4810      	ldr	r0, [pc, #64]	; (8004a44 <tan+0x64>)
 8004a02:	4281      	cmp	r1, r0
 8004a04:	dd09      	ble.n	8004a1a <tan+0x3a>
 8004a06:	ee10 0a10 	vmov	r0, s0
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f7fb fbf4 	bl	80001f8 <__aeabi_dsub>
 8004a10:	ec41 0b10 	vmov	d0, r0, r1
 8004a14:	b005      	add	sp, #20
 8004a16:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a1a:	4668      	mov	r0, sp
 8004a1c:	f000 f814 	bl	8004a48 <__ieee754_rem_pio2>
 8004a20:	0040      	lsls	r0, r0, #1
 8004a22:	f000 0002 	and.w	r0, r0, #2
 8004a26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004a2a:	ed9d 0b00 	vldr	d0, [sp]
 8004a2e:	f1c0 0001 	rsb	r0, r0, #1
 8004a32:	f000 feed 	bl	8005810 <__kernel_tan>
 8004a36:	e7ed      	b.n	8004a14 <tan+0x34>
	...
 8004a40:	3fe921fb 	.word	0x3fe921fb
 8004a44:	7fefffff 	.word	0x7fefffff

08004a48 <__ieee754_rem_pio2>:
 8004a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	ed2d 8b02 	vpush	{d8}
 8004a50:	ec55 4b10 	vmov	r4, r5, d0
 8004a54:	4bca      	ldr	r3, [pc, #808]	; (8004d80 <__ieee754_rem_pio2+0x338>)
 8004a56:	b08b      	sub	sp, #44	; 0x2c
 8004a58:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004a5c:	4598      	cmp	r8, r3
 8004a5e:	4682      	mov	sl, r0
 8004a60:	9502      	str	r5, [sp, #8]
 8004a62:	dc08      	bgt.n	8004a76 <__ieee754_rem_pio2+0x2e>
 8004a64:	2200      	movs	r2, #0
 8004a66:	2300      	movs	r3, #0
 8004a68:	ed80 0b00 	vstr	d0, [r0]
 8004a6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004a70:	f04f 0b00 	mov.w	fp, #0
 8004a74:	e028      	b.n	8004ac8 <__ieee754_rem_pio2+0x80>
 8004a76:	4bc3      	ldr	r3, [pc, #780]	; (8004d84 <__ieee754_rem_pio2+0x33c>)
 8004a78:	4598      	cmp	r8, r3
 8004a7a:	dc78      	bgt.n	8004b6e <__ieee754_rem_pio2+0x126>
 8004a7c:	9b02      	ldr	r3, [sp, #8]
 8004a7e:	4ec2      	ldr	r6, [pc, #776]	; (8004d88 <__ieee754_rem_pio2+0x340>)
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	ee10 0a10 	vmov	r0, s0
 8004a86:	a3b0      	add	r3, pc, #704	; (adr r3, 8004d48 <__ieee754_rem_pio2+0x300>)
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	dd39      	ble.n	8004b04 <__ieee754_rem_pio2+0xbc>
 8004a90:	f7fb fbb2 	bl	80001f8 <__aeabi_dsub>
 8004a94:	45b0      	cmp	r8, r6
 8004a96:	4604      	mov	r4, r0
 8004a98:	460d      	mov	r5, r1
 8004a9a:	d01b      	beq.n	8004ad4 <__ieee754_rem_pio2+0x8c>
 8004a9c:	a3ac      	add	r3, pc, #688	; (adr r3, 8004d50 <__ieee754_rem_pio2+0x308>)
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f7fb fba9 	bl	80001f8 <__aeabi_dsub>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	e9ca 2300 	strd	r2, r3, [sl]
 8004aae:	4620      	mov	r0, r4
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	f7fb fba1 	bl	80001f8 <__aeabi_dsub>
 8004ab6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004d50 <__ieee754_rem_pio2+0x308>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	f7fb fb9c 	bl	80001f8 <__aeabi_dsub>
 8004ac0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004ac4:	f04f 0b01 	mov.w	fp, #1
 8004ac8:	4658      	mov	r0, fp
 8004aca:	b00b      	add	sp, #44	; 0x2c
 8004acc:	ecbd 8b02 	vpop	{d8}
 8004ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad4:	a3a0      	add	r3, pc, #640	; (adr r3, 8004d58 <__ieee754_rem_pio2+0x310>)
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f7fb fb8d 	bl	80001f8 <__aeabi_dsub>
 8004ade:	a3a0      	add	r3, pc, #640	; (adr r3, 8004d60 <__ieee754_rem_pio2+0x318>)
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	460d      	mov	r5, r1
 8004ae8:	f7fb fb86 	bl	80001f8 <__aeabi_dsub>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	e9ca 2300 	strd	r2, r3, [sl]
 8004af4:	4620      	mov	r0, r4
 8004af6:	4629      	mov	r1, r5
 8004af8:	f7fb fb7e 	bl	80001f8 <__aeabi_dsub>
 8004afc:	a398      	add	r3, pc, #608	; (adr r3, 8004d60 <__ieee754_rem_pio2+0x318>)
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	e7db      	b.n	8004abc <__ieee754_rem_pio2+0x74>
 8004b04:	f7fb fb7a 	bl	80001fc <__adddf3>
 8004b08:	45b0      	cmp	r8, r6
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	460d      	mov	r5, r1
 8004b0e:	d016      	beq.n	8004b3e <__ieee754_rem_pio2+0xf6>
 8004b10:	a38f      	add	r3, pc, #572	; (adr r3, 8004d50 <__ieee754_rem_pio2+0x308>)
 8004b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b16:	f7fb fb71 	bl	80001fc <__adddf3>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	e9ca 2300 	strd	r2, r3, [sl]
 8004b22:	4620      	mov	r0, r4
 8004b24:	4629      	mov	r1, r5
 8004b26:	f7fb fb67 	bl	80001f8 <__aeabi_dsub>
 8004b2a:	a389      	add	r3, pc, #548	; (adr r3, 8004d50 <__ieee754_rem_pio2+0x308>)
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f7fb fb64 	bl	80001fc <__adddf3>
 8004b34:	f04f 3bff 	mov.w	fp, #4294967295
 8004b38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004b3c:	e7c4      	b.n	8004ac8 <__ieee754_rem_pio2+0x80>
 8004b3e:	a386      	add	r3, pc, #536	; (adr r3, 8004d58 <__ieee754_rem_pio2+0x310>)
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	f7fb fb5a 	bl	80001fc <__adddf3>
 8004b48:	a385      	add	r3, pc, #532	; (adr r3, 8004d60 <__ieee754_rem_pio2+0x318>)
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	4604      	mov	r4, r0
 8004b50:	460d      	mov	r5, r1
 8004b52:	f7fb fb53 	bl	80001fc <__adddf3>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	e9ca 2300 	strd	r2, r3, [sl]
 8004b5e:	4620      	mov	r0, r4
 8004b60:	4629      	mov	r1, r5
 8004b62:	f7fb fb49 	bl	80001f8 <__aeabi_dsub>
 8004b66:	a37e      	add	r3, pc, #504	; (adr r3, 8004d60 <__ieee754_rem_pio2+0x318>)
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	e7e0      	b.n	8004b30 <__ieee754_rem_pio2+0xe8>
 8004b6e:	4b87      	ldr	r3, [pc, #540]	; (8004d8c <__ieee754_rem_pio2+0x344>)
 8004b70:	4598      	cmp	r8, r3
 8004b72:	f300 80d9 	bgt.w	8004d28 <__ieee754_rem_pio2+0x2e0>
 8004b76:	f7ff fecf 	bl	8004918 <fabs>
 8004b7a:	ec55 4b10 	vmov	r4, r5, d0
 8004b7e:	ee10 0a10 	vmov	r0, s0
 8004b82:	a379      	add	r3, pc, #484	; (adr r3, 8004d68 <__ieee754_rem_pio2+0x320>)
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	4629      	mov	r1, r5
 8004b8a:	f7fb fced 	bl	8000568 <__aeabi_dmul>
 8004b8e:	4b80      	ldr	r3, [pc, #512]	; (8004d90 <__ieee754_rem_pio2+0x348>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	f7fb fb33 	bl	80001fc <__adddf3>
 8004b96:	f7fb ff81 	bl	8000a9c <__aeabi_d2iz>
 8004b9a:	4683      	mov	fp, r0
 8004b9c:	f7fb fc7a 	bl	8000494 <__aeabi_i2d>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	ec43 2b18 	vmov	d8, r2, r3
 8004ba8:	a367      	add	r3, pc, #412	; (adr r3, 8004d48 <__ieee754_rem_pio2+0x300>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f7fb fcdb 	bl	8000568 <__aeabi_dmul>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	4629      	mov	r1, r5
 8004bba:	f7fb fb1d 	bl	80001f8 <__aeabi_dsub>
 8004bbe:	a364      	add	r3, pc, #400	; (adr r3, 8004d50 <__ieee754_rem_pio2+0x308>)
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	460f      	mov	r7, r1
 8004bc8:	ec51 0b18 	vmov	r0, r1, d8
 8004bcc:	f7fb fccc 	bl	8000568 <__aeabi_dmul>
 8004bd0:	f1bb 0f1f 	cmp.w	fp, #31
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	460d      	mov	r5, r1
 8004bd8:	dc0d      	bgt.n	8004bf6 <__ieee754_rem_pio2+0x1ae>
 8004bda:	4b6e      	ldr	r3, [pc, #440]	; (8004d94 <__ieee754_rem_pio2+0x34c>)
 8004bdc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be4:	4543      	cmp	r3, r8
 8004be6:	d006      	beq.n	8004bf6 <__ieee754_rem_pio2+0x1ae>
 8004be8:	4622      	mov	r2, r4
 8004bea:	462b      	mov	r3, r5
 8004bec:	4630      	mov	r0, r6
 8004bee:	4639      	mov	r1, r7
 8004bf0:	f7fb fb02 	bl	80001f8 <__aeabi_dsub>
 8004bf4:	e00f      	b.n	8004c16 <__ieee754_rem_pio2+0x1ce>
 8004bf6:	462b      	mov	r3, r5
 8004bf8:	4622      	mov	r2, r4
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	4639      	mov	r1, r7
 8004bfe:	f7fb fafb 	bl	80001f8 <__aeabi_dsub>
 8004c02:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004c06:	9303      	str	r3, [sp, #12]
 8004c08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004c0c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004c10:	f1b8 0f10 	cmp.w	r8, #16
 8004c14:	dc02      	bgt.n	8004c1c <__ieee754_rem_pio2+0x1d4>
 8004c16:	e9ca 0100 	strd	r0, r1, [sl]
 8004c1a:	e039      	b.n	8004c90 <__ieee754_rem_pio2+0x248>
 8004c1c:	a34e      	add	r3, pc, #312	; (adr r3, 8004d58 <__ieee754_rem_pio2+0x310>)
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	ec51 0b18 	vmov	r0, r1, d8
 8004c26:	f7fb fc9f 	bl	8000568 <__aeabi_dmul>
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	460d      	mov	r5, r1
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4630      	mov	r0, r6
 8004c34:	4639      	mov	r1, r7
 8004c36:	f7fb fadf 	bl	80001f8 <__aeabi_dsub>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4680      	mov	r8, r0
 8004c40:	4689      	mov	r9, r1
 8004c42:	4630      	mov	r0, r6
 8004c44:	4639      	mov	r1, r7
 8004c46:	f7fb fad7 	bl	80001f8 <__aeabi_dsub>
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	462b      	mov	r3, r5
 8004c4e:	f7fb fad3 	bl	80001f8 <__aeabi_dsub>
 8004c52:	a343      	add	r3, pc, #268	; (adr r3, 8004d60 <__ieee754_rem_pio2+0x318>)
 8004c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c58:	4604      	mov	r4, r0
 8004c5a:	460d      	mov	r5, r1
 8004c5c:	ec51 0b18 	vmov	r0, r1, d8
 8004c60:	f7fb fc82 	bl	8000568 <__aeabi_dmul>
 8004c64:	4622      	mov	r2, r4
 8004c66:	462b      	mov	r3, r5
 8004c68:	f7fb fac6 	bl	80001f8 <__aeabi_dsub>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4604      	mov	r4, r0
 8004c72:	460d      	mov	r5, r1
 8004c74:	4640      	mov	r0, r8
 8004c76:	4649      	mov	r1, r9
 8004c78:	f7fb fabe 	bl	80001f8 <__aeabi_dsub>
 8004c7c:	9a03      	ldr	r2, [sp, #12]
 8004c7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b31      	cmp	r3, #49	; 0x31
 8004c86:	dc24      	bgt.n	8004cd2 <__ieee754_rem_pio2+0x28a>
 8004c88:	e9ca 0100 	strd	r0, r1, [sl]
 8004c8c:	4646      	mov	r6, r8
 8004c8e:	464f      	mov	r7, r9
 8004c90:	e9da 8900 	ldrd	r8, r9, [sl]
 8004c94:	4630      	mov	r0, r6
 8004c96:	4642      	mov	r2, r8
 8004c98:	464b      	mov	r3, r9
 8004c9a:	4639      	mov	r1, r7
 8004c9c:	f7fb faac 	bl	80001f8 <__aeabi_dsub>
 8004ca0:	462b      	mov	r3, r5
 8004ca2:	4622      	mov	r2, r4
 8004ca4:	f7fb faa8 	bl	80001f8 <__aeabi_dsub>
 8004ca8:	9b02      	ldr	r3, [sp, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004cb0:	f6bf af0a 	bge.w	8004ac8 <__ieee754_rem_pio2+0x80>
 8004cb4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004cb8:	f8ca 3004 	str.w	r3, [sl, #4]
 8004cbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cc0:	f8ca 8000 	str.w	r8, [sl]
 8004cc4:	f8ca 0008 	str.w	r0, [sl, #8]
 8004cc8:	f8ca 300c 	str.w	r3, [sl, #12]
 8004ccc:	f1cb 0b00 	rsb	fp, fp, #0
 8004cd0:	e6fa      	b.n	8004ac8 <__ieee754_rem_pio2+0x80>
 8004cd2:	a327      	add	r3, pc, #156	; (adr r3, 8004d70 <__ieee754_rem_pio2+0x328>)
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	ec51 0b18 	vmov	r0, r1, d8
 8004cdc:	f7fb fc44 	bl	8000568 <__aeabi_dmul>
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	460d      	mov	r5, r1
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4640      	mov	r0, r8
 8004cea:	4649      	mov	r1, r9
 8004cec:	f7fb fa84 	bl	80001f8 <__aeabi_dsub>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	460f      	mov	r7, r1
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	f7fb fa7c 	bl	80001f8 <__aeabi_dsub>
 8004d00:	4622      	mov	r2, r4
 8004d02:	462b      	mov	r3, r5
 8004d04:	f7fb fa78 	bl	80001f8 <__aeabi_dsub>
 8004d08:	a31b      	add	r3, pc, #108	; (adr r3, 8004d78 <__ieee754_rem_pio2+0x330>)
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	4604      	mov	r4, r0
 8004d10:	460d      	mov	r5, r1
 8004d12:	ec51 0b18 	vmov	r0, r1, d8
 8004d16:	f7fb fc27 	bl	8000568 <__aeabi_dmul>
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	f7fb fa6b 	bl	80001f8 <__aeabi_dsub>
 8004d22:	4604      	mov	r4, r0
 8004d24:	460d      	mov	r5, r1
 8004d26:	e75f      	b.n	8004be8 <__ieee754_rem_pio2+0x1a0>
 8004d28:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <__ieee754_rem_pio2+0x350>)
 8004d2a:	4598      	cmp	r8, r3
 8004d2c:	dd36      	ble.n	8004d9c <__ieee754_rem_pio2+0x354>
 8004d2e:	ee10 2a10 	vmov	r2, s0
 8004d32:	462b      	mov	r3, r5
 8004d34:	4620      	mov	r0, r4
 8004d36:	4629      	mov	r1, r5
 8004d38:	f7fb fa5e 	bl	80001f8 <__aeabi_dsub>
 8004d3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004d40:	e9ca 0100 	strd	r0, r1, [sl]
 8004d44:	e694      	b.n	8004a70 <__ieee754_rem_pio2+0x28>
 8004d46:	bf00      	nop
 8004d48:	54400000 	.word	0x54400000
 8004d4c:	3ff921fb 	.word	0x3ff921fb
 8004d50:	1a626331 	.word	0x1a626331
 8004d54:	3dd0b461 	.word	0x3dd0b461
 8004d58:	1a600000 	.word	0x1a600000
 8004d5c:	3dd0b461 	.word	0x3dd0b461
 8004d60:	2e037073 	.word	0x2e037073
 8004d64:	3ba3198a 	.word	0x3ba3198a
 8004d68:	6dc9c883 	.word	0x6dc9c883
 8004d6c:	3fe45f30 	.word	0x3fe45f30
 8004d70:	2e000000 	.word	0x2e000000
 8004d74:	3ba3198a 	.word	0x3ba3198a
 8004d78:	252049c1 	.word	0x252049c1
 8004d7c:	397b839a 	.word	0x397b839a
 8004d80:	3fe921fb 	.word	0x3fe921fb
 8004d84:	4002d97b 	.word	0x4002d97b
 8004d88:	3ff921fb 	.word	0x3ff921fb
 8004d8c:	413921fb 	.word	0x413921fb
 8004d90:	3fe00000 	.word	0x3fe00000
 8004d94:	08005eb0 	.word	0x08005eb0
 8004d98:	7fefffff 	.word	0x7fefffff
 8004d9c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004da0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004da4:	ee10 0a10 	vmov	r0, s0
 8004da8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004dac:	ee10 6a10 	vmov	r6, s0
 8004db0:	460f      	mov	r7, r1
 8004db2:	f7fb fe73 	bl	8000a9c <__aeabi_d2iz>
 8004db6:	f7fb fb6d 	bl	8000494 <__aeabi_i2d>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004dc6:	f7fb fa17 	bl	80001f8 <__aeabi_dsub>
 8004dca:	4b23      	ldr	r3, [pc, #140]	; (8004e58 <__ieee754_rem_pio2+0x410>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f7fb fbcb 	bl	8000568 <__aeabi_dmul>
 8004dd2:	460f      	mov	r7, r1
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	f7fb fe61 	bl	8000a9c <__aeabi_d2iz>
 8004dda:	f7fb fb5b 	bl	8000494 <__aeabi_i2d>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4630      	mov	r0, r6
 8004de4:	4639      	mov	r1, r7
 8004de6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004dea:	f7fb fa05 	bl	80001f8 <__aeabi_dsub>
 8004dee:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <__ieee754_rem_pio2+0x410>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	f7fb fbb9 	bl	8000568 <__aeabi_dmul>
 8004df6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004dfa:	ad04      	add	r5, sp, #16
 8004dfc:	f04f 0803 	mov.w	r8, #3
 8004e00:	46a9      	mov	r9, r5
 8004e02:	2600      	movs	r6, #0
 8004e04:	2700      	movs	r7, #0
 8004e06:	4632      	mov	r2, r6
 8004e08:	463b      	mov	r3, r7
 8004e0a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004e0e:	46c3      	mov	fp, r8
 8004e10:	3d08      	subs	r5, #8
 8004e12:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e16:	f7fb fe0f 	bl	8000a38 <__aeabi_dcmpeq>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d1f3      	bne.n	8004e06 <__ieee754_rem_pio2+0x3be>
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <__ieee754_rem_pio2+0x414>)
 8004e20:	9301      	str	r3, [sp, #4]
 8004e22:	2302      	movs	r3, #2
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	4622      	mov	r2, r4
 8004e28:	465b      	mov	r3, fp
 8004e2a:	4651      	mov	r1, sl
 8004e2c:	4648      	mov	r0, r9
 8004e2e:	f000 f8df 	bl	8004ff0 <__kernel_rem_pio2>
 8004e32:	9b02      	ldr	r3, [sp, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	4683      	mov	fp, r0
 8004e38:	f6bf ae46 	bge.w	8004ac8 <__ieee754_rem_pio2+0x80>
 8004e3c:	e9da 2100 	ldrd	r2, r1, [sl]
 8004e40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e44:	e9ca 2300 	strd	r2, r3, [sl]
 8004e48:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004e4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e50:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004e54:	e73a      	b.n	8004ccc <__ieee754_rem_pio2+0x284>
 8004e56:	bf00      	nop
 8004e58:	41700000 	.word	0x41700000
 8004e5c:	08005f30 	.word	0x08005f30

08004e60 <__kernel_cos>:
 8004e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	ec57 6b10 	vmov	r6, r7, d0
 8004e68:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004e6c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004e70:	ed8d 1b00 	vstr	d1, [sp]
 8004e74:	da07      	bge.n	8004e86 <__kernel_cos+0x26>
 8004e76:	ee10 0a10 	vmov	r0, s0
 8004e7a:	4639      	mov	r1, r7
 8004e7c:	f7fb fe0e 	bl	8000a9c <__aeabi_d2iz>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	f000 8088 	beq.w	8004f96 <__kernel_cos+0x136>
 8004e86:	4632      	mov	r2, r6
 8004e88:	463b      	mov	r3, r7
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	4639      	mov	r1, r7
 8004e8e:	f7fb fb6b 	bl	8000568 <__aeabi_dmul>
 8004e92:	4b51      	ldr	r3, [pc, #324]	; (8004fd8 <__kernel_cos+0x178>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	4604      	mov	r4, r0
 8004e98:	460d      	mov	r5, r1
 8004e9a:	f7fb fb65 	bl	8000568 <__aeabi_dmul>
 8004e9e:	a340      	add	r3, pc, #256	; (adr r3, 8004fa0 <__kernel_cos+0x140>)
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	4682      	mov	sl, r0
 8004ea6:	468b      	mov	fp, r1
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	4629      	mov	r1, r5
 8004eac:	f7fb fb5c 	bl	8000568 <__aeabi_dmul>
 8004eb0:	a33d      	add	r3, pc, #244	; (adr r3, 8004fa8 <__kernel_cos+0x148>)
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f7fb f9a1 	bl	80001fc <__adddf3>
 8004eba:	4622      	mov	r2, r4
 8004ebc:	462b      	mov	r3, r5
 8004ebe:	f7fb fb53 	bl	8000568 <__aeabi_dmul>
 8004ec2:	a33b      	add	r3, pc, #236	; (adr r3, 8004fb0 <__kernel_cos+0x150>)
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f7fb f996 	bl	80001f8 <__aeabi_dsub>
 8004ecc:	4622      	mov	r2, r4
 8004ece:	462b      	mov	r3, r5
 8004ed0:	f7fb fb4a 	bl	8000568 <__aeabi_dmul>
 8004ed4:	a338      	add	r3, pc, #224	; (adr r3, 8004fb8 <__kernel_cos+0x158>)
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	f7fb f98f 	bl	80001fc <__adddf3>
 8004ede:	4622      	mov	r2, r4
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	f7fb fb41 	bl	8000568 <__aeabi_dmul>
 8004ee6:	a336      	add	r3, pc, #216	; (adr r3, 8004fc0 <__kernel_cos+0x160>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f7fb f984 	bl	80001f8 <__aeabi_dsub>
 8004ef0:	4622      	mov	r2, r4
 8004ef2:	462b      	mov	r3, r5
 8004ef4:	f7fb fb38 	bl	8000568 <__aeabi_dmul>
 8004ef8:	a333      	add	r3, pc, #204	; (adr r3, 8004fc8 <__kernel_cos+0x168>)
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f7fb f97d 	bl	80001fc <__adddf3>
 8004f02:	4622      	mov	r2, r4
 8004f04:	462b      	mov	r3, r5
 8004f06:	f7fb fb2f 	bl	8000568 <__aeabi_dmul>
 8004f0a:	4622      	mov	r2, r4
 8004f0c:	462b      	mov	r3, r5
 8004f0e:	f7fb fb2b 	bl	8000568 <__aeabi_dmul>
 8004f12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f16:	4604      	mov	r4, r0
 8004f18:	460d      	mov	r5, r1
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	f7fb fb23 	bl	8000568 <__aeabi_dmul>
 8004f22:	460b      	mov	r3, r1
 8004f24:	4602      	mov	r2, r0
 8004f26:	4629      	mov	r1, r5
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f7fb f965 	bl	80001f8 <__aeabi_dsub>
 8004f2e:	4b2b      	ldr	r3, [pc, #172]	; (8004fdc <__kernel_cos+0x17c>)
 8004f30:	4598      	cmp	r8, r3
 8004f32:	4606      	mov	r6, r0
 8004f34:	460f      	mov	r7, r1
 8004f36:	dc10      	bgt.n	8004f5a <__kernel_cos+0xfa>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4650      	mov	r0, sl
 8004f3e:	4659      	mov	r1, fp
 8004f40:	f7fb f95a 	bl	80001f8 <__aeabi_dsub>
 8004f44:	460b      	mov	r3, r1
 8004f46:	4926      	ldr	r1, [pc, #152]	; (8004fe0 <__kernel_cos+0x180>)
 8004f48:	4602      	mov	r2, r0
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f7fb f954 	bl	80001f8 <__aeabi_dsub>
 8004f50:	ec41 0b10 	vmov	d0, r0, r1
 8004f54:	b003      	add	sp, #12
 8004f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5a:	4b22      	ldr	r3, [pc, #136]	; (8004fe4 <__kernel_cos+0x184>)
 8004f5c:	4920      	ldr	r1, [pc, #128]	; (8004fe0 <__kernel_cos+0x180>)
 8004f5e:	4598      	cmp	r8, r3
 8004f60:	bfcc      	ite	gt
 8004f62:	4d21      	ldrgt	r5, [pc, #132]	; (8004fe8 <__kernel_cos+0x188>)
 8004f64:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004f68:	2400      	movs	r4, #0
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	462b      	mov	r3, r5
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f7fb f942 	bl	80001f8 <__aeabi_dsub>
 8004f74:	4622      	mov	r2, r4
 8004f76:	4680      	mov	r8, r0
 8004f78:	4689      	mov	r9, r1
 8004f7a:	462b      	mov	r3, r5
 8004f7c:	4650      	mov	r0, sl
 8004f7e:	4659      	mov	r1, fp
 8004f80:	f7fb f93a 	bl	80001f8 <__aeabi_dsub>
 8004f84:	4632      	mov	r2, r6
 8004f86:	463b      	mov	r3, r7
 8004f88:	f7fb f936 	bl	80001f8 <__aeabi_dsub>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4640      	mov	r0, r8
 8004f92:	4649      	mov	r1, r9
 8004f94:	e7da      	b.n	8004f4c <__kernel_cos+0xec>
 8004f96:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004fd0 <__kernel_cos+0x170>
 8004f9a:	e7db      	b.n	8004f54 <__kernel_cos+0xf4>
 8004f9c:	f3af 8000 	nop.w
 8004fa0:	be8838d4 	.word	0xbe8838d4
 8004fa4:	bda8fae9 	.word	0xbda8fae9
 8004fa8:	bdb4b1c4 	.word	0xbdb4b1c4
 8004fac:	3e21ee9e 	.word	0x3e21ee9e
 8004fb0:	809c52ad 	.word	0x809c52ad
 8004fb4:	3e927e4f 	.word	0x3e927e4f
 8004fb8:	19cb1590 	.word	0x19cb1590
 8004fbc:	3efa01a0 	.word	0x3efa01a0
 8004fc0:	16c15177 	.word	0x16c15177
 8004fc4:	3f56c16c 	.word	0x3f56c16c
 8004fc8:	5555554c 	.word	0x5555554c
 8004fcc:	3fa55555 	.word	0x3fa55555
 8004fd0:	00000000 	.word	0x00000000
 8004fd4:	3ff00000 	.word	0x3ff00000
 8004fd8:	3fe00000 	.word	0x3fe00000
 8004fdc:	3fd33332 	.word	0x3fd33332
 8004fe0:	3ff00000 	.word	0x3ff00000
 8004fe4:	3fe90000 	.word	0x3fe90000
 8004fe8:	3fd20000 	.word	0x3fd20000
 8004fec:	00000000 	.word	0x00000000

08004ff0 <__kernel_rem_pio2>:
 8004ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	ed2d 8b02 	vpush	{d8}
 8004ff8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004ffc:	f112 0f14 	cmn.w	r2, #20
 8005000:	9308      	str	r3, [sp, #32]
 8005002:	9101      	str	r1, [sp, #4]
 8005004:	4bc4      	ldr	r3, [pc, #784]	; (8005318 <__kernel_rem_pio2+0x328>)
 8005006:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005008:	900b      	str	r0, [sp, #44]	; 0x2c
 800500a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800500e:	9302      	str	r3, [sp, #8]
 8005010:	9b08      	ldr	r3, [sp, #32]
 8005012:	f103 33ff 	add.w	r3, r3, #4294967295
 8005016:	bfa8      	it	ge
 8005018:	1ed4      	subge	r4, r2, #3
 800501a:	9306      	str	r3, [sp, #24]
 800501c:	bfb2      	itee	lt
 800501e:	2400      	movlt	r4, #0
 8005020:	2318      	movge	r3, #24
 8005022:	fb94 f4f3 	sdivge	r4, r4, r3
 8005026:	f06f 0317 	mvn.w	r3, #23
 800502a:	fb04 3303 	mla	r3, r4, r3, r3
 800502e:	eb03 0a02 	add.w	sl, r3, r2
 8005032:	9b02      	ldr	r3, [sp, #8]
 8005034:	9a06      	ldr	r2, [sp, #24]
 8005036:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005308 <__kernel_rem_pio2+0x318>
 800503a:	eb03 0802 	add.w	r8, r3, r2
 800503e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005040:	1aa7      	subs	r7, r4, r2
 8005042:	ae22      	add	r6, sp, #136	; 0x88
 8005044:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005048:	2500      	movs	r5, #0
 800504a:	4545      	cmp	r5, r8
 800504c:	dd13      	ble.n	8005076 <__kernel_rem_pio2+0x86>
 800504e:	9b08      	ldr	r3, [sp, #32]
 8005050:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005308 <__kernel_rem_pio2+0x318>
 8005054:	aa22      	add	r2, sp, #136	; 0x88
 8005056:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800505a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800505e:	f04f 0800 	mov.w	r8, #0
 8005062:	9b02      	ldr	r3, [sp, #8]
 8005064:	4598      	cmp	r8, r3
 8005066:	dc2f      	bgt.n	80050c8 <__kernel_rem_pio2+0xd8>
 8005068:	ed8d 8b04 	vstr	d8, [sp, #16]
 800506c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005070:	462f      	mov	r7, r5
 8005072:	2600      	movs	r6, #0
 8005074:	e01b      	b.n	80050ae <__kernel_rem_pio2+0xbe>
 8005076:	42ef      	cmn	r7, r5
 8005078:	d407      	bmi.n	800508a <__kernel_rem_pio2+0x9a>
 800507a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800507e:	f7fb fa09 	bl	8000494 <__aeabi_i2d>
 8005082:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005086:	3501      	adds	r5, #1
 8005088:	e7df      	b.n	800504a <__kernel_rem_pio2+0x5a>
 800508a:	ec51 0b18 	vmov	r0, r1, d8
 800508e:	e7f8      	b.n	8005082 <__kernel_rem_pio2+0x92>
 8005090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005094:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005098:	f7fb fa66 	bl	8000568 <__aeabi_dmul>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050a4:	f7fb f8aa 	bl	80001fc <__adddf3>
 80050a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050ac:	3601      	adds	r6, #1
 80050ae:	9b06      	ldr	r3, [sp, #24]
 80050b0:	429e      	cmp	r6, r3
 80050b2:	f1a7 0708 	sub.w	r7, r7, #8
 80050b6:	ddeb      	ble.n	8005090 <__kernel_rem_pio2+0xa0>
 80050b8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80050bc:	f108 0801 	add.w	r8, r8, #1
 80050c0:	ecab 7b02 	vstmia	fp!, {d7}
 80050c4:	3508      	adds	r5, #8
 80050c6:	e7cc      	b.n	8005062 <__kernel_rem_pio2+0x72>
 80050c8:	9b02      	ldr	r3, [sp, #8]
 80050ca:	aa0e      	add	r2, sp, #56	; 0x38
 80050cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80050d0:	930d      	str	r3, [sp, #52]	; 0x34
 80050d2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80050d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80050d8:	9c02      	ldr	r4, [sp, #8]
 80050da:	930c      	str	r3, [sp, #48]	; 0x30
 80050dc:	00e3      	lsls	r3, r4, #3
 80050de:	930a      	str	r3, [sp, #40]	; 0x28
 80050e0:	ab9a      	add	r3, sp, #616	; 0x268
 80050e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80050e6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80050ea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80050ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80050f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80050f4:	46c3      	mov	fp, r8
 80050f6:	46a1      	mov	r9, r4
 80050f8:	f1b9 0f00 	cmp.w	r9, #0
 80050fc:	f1a5 0508 	sub.w	r5, r5, #8
 8005100:	dc77      	bgt.n	80051f2 <__kernel_rem_pio2+0x202>
 8005102:	ec47 6b10 	vmov	d0, r6, r7
 8005106:	4650      	mov	r0, sl
 8005108:	f000 fe0e 	bl	8005d28 <scalbn>
 800510c:	ec57 6b10 	vmov	r6, r7, d0
 8005110:	2200      	movs	r2, #0
 8005112:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005116:	ee10 0a10 	vmov	r0, s0
 800511a:	4639      	mov	r1, r7
 800511c:	f7fb fa24 	bl	8000568 <__aeabi_dmul>
 8005120:	ec41 0b10 	vmov	d0, r0, r1
 8005124:	f000 fd80 	bl	8005c28 <floor>
 8005128:	4b7c      	ldr	r3, [pc, #496]	; (800531c <__kernel_rem_pio2+0x32c>)
 800512a:	ec51 0b10 	vmov	r0, r1, d0
 800512e:	2200      	movs	r2, #0
 8005130:	f7fb fa1a 	bl	8000568 <__aeabi_dmul>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4630      	mov	r0, r6
 800513a:	4639      	mov	r1, r7
 800513c:	f7fb f85c 	bl	80001f8 <__aeabi_dsub>
 8005140:	460f      	mov	r7, r1
 8005142:	4606      	mov	r6, r0
 8005144:	f7fb fcaa 	bl	8000a9c <__aeabi_d2iz>
 8005148:	9004      	str	r0, [sp, #16]
 800514a:	f7fb f9a3 	bl	8000494 <__aeabi_i2d>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4630      	mov	r0, r6
 8005154:	4639      	mov	r1, r7
 8005156:	f7fb f84f 	bl	80001f8 <__aeabi_dsub>
 800515a:	f1ba 0f00 	cmp.w	sl, #0
 800515e:	4606      	mov	r6, r0
 8005160:	460f      	mov	r7, r1
 8005162:	dd6d      	ble.n	8005240 <__kernel_rem_pio2+0x250>
 8005164:	1e62      	subs	r2, r4, #1
 8005166:	ab0e      	add	r3, sp, #56	; 0x38
 8005168:	9d04      	ldr	r5, [sp, #16]
 800516a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800516e:	f1ca 0118 	rsb	r1, sl, #24
 8005172:	fa40 f301 	asr.w	r3, r0, r1
 8005176:	441d      	add	r5, r3
 8005178:	408b      	lsls	r3, r1
 800517a:	1ac0      	subs	r0, r0, r3
 800517c:	ab0e      	add	r3, sp, #56	; 0x38
 800517e:	9504      	str	r5, [sp, #16]
 8005180:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005184:	f1ca 0317 	rsb	r3, sl, #23
 8005188:	fa40 fb03 	asr.w	fp, r0, r3
 800518c:	f1bb 0f00 	cmp.w	fp, #0
 8005190:	dd65      	ble.n	800525e <__kernel_rem_pio2+0x26e>
 8005192:	9b04      	ldr	r3, [sp, #16]
 8005194:	2200      	movs	r2, #0
 8005196:	3301      	adds	r3, #1
 8005198:	9304      	str	r3, [sp, #16]
 800519a:	4615      	mov	r5, r2
 800519c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80051a0:	4294      	cmp	r4, r2
 80051a2:	f300 809c 	bgt.w	80052de <__kernel_rem_pio2+0x2ee>
 80051a6:	f1ba 0f00 	cmp.w	sl, #0
 80051aa:	dd07      	ble.n	80051bc <__kernel_rem_pio2+0x1cc>
 80051ac:	f1ba 0f01 	cmp.w	sl, #1
 80051b0:	f000 80c0 	beq.w	8005334 <__kernel_rem_pio2+0x344>
 80051b4:	f1ba 0f02 	cmp.w	sl, #2
 80051b8:	f000 80c6 	beq.w	8005348 <__kernel_rem_pio2+0x358>
 80051bc:	f1bb 0f02 	cmp.w	fp, #2
 80051c0:	d14d      	bne.n	800525e <__kernel_rem_pio2+0x26e>
 80051c2:	4632      	mov	r2, r6
 80051c4:	463b      	mov	r3, r7
 80051c6:	4956      	ldr	r1, [pc, #344]	; (8005320 <__kernel_rem_pio2+0x330>)
 80051c8:	2000      	movs	r0, #0
 80051ca:	f7fb f815 	bl	80001f8 <__aeabi_dsub>
 80051ce:	4606      	mov	r6, r0
 80051d0:	460f      	mov	r7, r1
 80051d2:	2d00      	cmp	r5, #0
 80051d4:	d043      	beq.n	800525e <__kernel_rem_pio2+0x26e>
 80051d6:	4650      	mov	r0, sl
 80051d8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005310 <__kernel_rem_pio2+0x320>
 80051dc:	f000 fda4 	bl	8005d28 <scalbn>
 80051e0:	4630      	mov	r0, r6
 80051e2:	4639      	mov	r1, r7
 80051e4:	ec53 2b10 	vmov	r2, r3, d0
 80051e8:	f7fb f806 	bl	80001f8 <__aeabi_dsub>
 80051ec:	4606      	mov	r6, r0
 80051ee:	460f      	mov	r7, r1
 80051f0:	e035      	b.n	800525e <__kernel_rem_pio2+0x26e>
 80051f2:	4b4c      	ldr	r3, [pc, #304]	; (8005324 <__kernel_rem_pio2+0x334>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	4630      	mov	r0, r6
 80051f8:	4639      	mov	r1, r7
 80051fa:	f7fb f9b5 	bl	8000568 <__aeabi_dmul>
 80051fe:	f7fb fc4d 	bl	8000a9c <__aeabi_d2iz>
 8005202:	f7fb f947 	bl	8000494 <__aeabi_i2d>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	ec43 2b18 	vmov	d8, r2, r3
 800520e:	4b46      	ldr	r3, [pc, #280]	; (8005328 <__kernel_rem_pio2+0x338>)
 8005210:	2200      	movs	r2, #0
 8005212:	f7fb f9a9 	bl	8000568 <__aeabi_dmul>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4630      	mov	r0, r6
 800521c:	4639      	mov	r1, r7
 800521e:	f7fa ffeb 	bl	80001f8 <__aeabi_dsub>
 8005222:	f7fb fc3b 	bl	8000a9c <__aeabi_d2iz>
 8005226:	e9d5 2300 	ldrd	r2, r3, [r5]
 800522a:	f84b 0b04 	str.w	r0, [fp], #4
 800522e:	ec51 0b18 	vmov	r0, r1, d8
 8005232:	f7fa ffe3 	bl	80001fc <__adddf3>
 8005236:	f109 39ff 	add.w	r9, r9, #4294967295
 800523a:	4606      	mov	r6, r0
 800523c:	460f      	mov	r7, r1
 800523e:	e75b      	b.n	80050f8 <__kernel_rem_pio2+0x108>
 8005240:	d106      	bne.n	8005250 <__kernel_rem_pio2+0x260>
 8005242:	1e63      	subs	r3, r4, #1
 8005244:	aa0e      	add	r2, sp, #56	; 0x38
 8005246:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800524a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800524e:	e79d      	b.n	800518c <__kernel_rem_pio2+0x19c>
 8005250:	4b36      	ldr	r3, [pc, #216]	; (800532c <__kernel_rem_pio2+0x33c>)
 8005252:	2200      	movs	r2, #0
 8005254:	f7fb fc0e 	bl	8000a74 <__aeabi_dcmpge>
 8005258:	2800      	cmp	r0, #0
 800525a:	d13d      	bne.n	80052d8 <__kernel_rem_pio2+0x2e8>
 800525c:	4683      	mov	fp, r0
 800525e:	2200      	movs	r2, #0
 8005260:	2300      	movs	r3, #0
 8005262:	4630      	mov	r0, r6
 8005264:	4639      	mov	r1, r7
 8005266:	f7fb fbe7 	bl	8000a38 <__aeabi_dcmpeq>
 800526a:	2800      	cmp	r0, #0
 800526c:	f000 80c0 	beq.w	80053f0 <__kernel_rem_pio2+0x400>
 8005270:	1e65      	subs	r5, r4, #1
 8005272:	462b      	mov	r3, r5
 8005274:	2200      	movs	r2, #0
 8005276:	9902      	ldr	r1, [sp, #8]
 8005278:	428b      	cmp	r3, r1
 800527a:	da6c      	bge.n	8005356 <__kernel_rem_pio2+0x366>
 800527c:	2a00      	cmp	r2, #0
 800527e:	f000 8089 	beq.w	8005394 <__kernel_rem_pio2+0x3a4>
 8005282:	ab0e      	add	r3, sp, #56	; 0x38
 8005284:	f1aa 0a18 	sub.w	sl, sl, #24
 8005288:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 80ad 	beq.w	80053ec <__kernel_rem_pio2+0x3fc>
 8005292:	4650      	mov	r0, sl
 8005294:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005310 <__kernel_rem_pio2+0x320>
 8005298:	f000 fd46 	bl	8005d28 <scalbn>
 800529c:	ab9a      	add	r3, sp, #616	; 0x268
 800529e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80052a2:	ec57 6b10 	vmov	r6, r7, d0
 80052a6:	00ec      	lsls	r4, r5, #3
 80052a8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80052ac:	46aa      	mov	sl, r5
 80052ae:	f1ba 0f00 	cmp.w	sl, #0
 80052b2:	f280 80d6 	bge.w	8005462 <__kernel_rem_pio2+0x472>
 80052b6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005308 <__kernel_rem_pio2+0x318>
 80052ba:	462e      	mov	r6, r5
 80052bc:	2e00      	cmp	r6, #0
 80052be:	f2c0 8104 	blt.w	80054ca <__kernel_rem_pio2+0x4da>
 80052c2:	ab72      	add	r3, sp, #456	; 0x1c8
 80052c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80052c8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005330 <__kernel_rem_pio2+0x340>
 80052cc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80052d0:	f04f 0800 	mov.w	r8, #0
 80052d4:	1baf      	subs	r7, r5, r6
 80052d6:	e0ea      	b.n	80054ae <__kernel_rem_pio2+0x4be>
 80052d8:	f04f 0b02 	mov.w	fp, #2
 80052dc:	e759      	b.n	8005192 <__kernel_rem_pio2+0x1a2>
 80052de:	f8d8 3000 	ldr.w	r3, [r8]
 80052e2:	b955      	cbnz	r5, 80052fa <__kernel_rem_pio2+0x30a>
 80052e4:	b123      	cbz	r3, 80052f0 <__kernel_rem_pio2+0x300>
 80052e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80052ea:	f8c8 3000 	str.w	r3, [r8]
 80052ee:	2301      	movs	r3, #1
 80052f0:	3201      	adds	r2, #1
 80052f2:	f108 0804 	add.w	r8, r8, #4
 80052f6:	461d      	mov	r5, r3
 80052f8:	e752      	b.n	80051a0 <__kernel_rem_pio2+0x1b0>
 80052fa:	1acb      	subs	r3, r1, r3
 80052fc:	f8c8 3000 	str.w	r3, [r8]
 8005300:	462b      	mov	r3, r5
 8005302:	e7f5      	b.n	80052f0 <__kernel_rem_pio2+0x300>
 8005304:	f3af 8000 	nop.w
	...
 8005314:	3ff00000 	.word	0x3ff00000
 8005318:	08006078 	.word	0x08006078
 800531c:	40200000 	.word	0x40200000
 8005320:	3ff00000 	.word	0x3ff00000
 8005324:	3e700000 	.word	0x3e700000
 8005328:	41700000 	.word	0x41700000
 800532c:	3fe00000 	.word	0x3fe00000
 8005330:	08006038 	.word	0x08006038
 8005334:	1e62      	subs	r2, r4, #1
 8005336:	ab0e      	add	r3, sp, #56	; 0x38
 8005338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005340:	a90e      	add	r1, sp, #56	; 0x38
 8005342:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005346:	e739      	b.n	80051bc <__kernel_rem_pio2+0x1cc>
 8005348:	1e62      	subs	r2, r4, #1
 800534a:	ab0e      	add	r3, sp, #56	; 0x38
 800534c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005350:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005354:	e7f4      	b.n	8005340 <__kernel_rem_pio2+0x350>
 8005356:	a90e      	add	r1, sp, #56	; 0x38
 8005358:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800535c:	3b01      	subs	r3, #1
 800535e:	430a      	orrs	r2, r1
 8005360:	e789      	b.n	8005276 <__kernel_rem_pio2+0x286>
 8005362:	3301      	adds	r3, #1
 8005364:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005368:	2900      	cmp	r1, #0
 800536a:	d0fa      	beq.n	8005362 <__kernel_rem_pio2+0x372>
 800536c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800536e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8005372:	446a      	add	r2, sp
 8005374:	3a98      	subs	r2, #152	; 0x98
 8005376:	920a      	str	r2, [sp, #40]	; 0x28
 8005378:	9a08      	ldr	r2, [sp, #32]
 800537a:	18e3      	adds	r3, r4, r3
 800537c:	18a5      	adds	r5, r4, r2
 800537e:	aa22      	add	r2, sp, #136	; 0x88
 8005380:	f104 0801 	add.w	r8, r4, #1
 8005384:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005388:	9304      	str	r3, [sp, #16]
 800538a:	9b04      	ldr	r3, [sp, #16]
 800538c:	4543      	cmp	r3, r8
 800538e:	da04      	bge.n	800539a <__kernel_rem_pio2+0x3aa>
 8005390:	461c      	mov	r4, r3
 8005392:	e6a3      	b.n	80050dc <__kernel_rem_pio2+0xec>
 8005394:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005396:	2301      	movs	r3, #1
 8005398:	e7e4      	b.n	8005364 <__kernel_rem_pio2+0x374>
 800539a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800539c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80053a0:	f7fb f878 	bl	8000494 <__aeabi_i2d>
 80053a4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80053a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053aa:	46ab      	mov	fp, r5
 80053ac:	461c      	mov	r4, r3
 80053ae:	f04f 0900 	mov.w	r9, #0
 80053b2:	2600      	movs	r6, #0
 80053b4:	2700      	movs	r7, #0
 80053b6:	9b06      	ldr	r3, [sp, #24]
 80053b8:	4599      	cmp	r9, r3
 80053ba:	dd06      	ble.n	80053ca <__kernel_rem_pio2+0x3da>
 80053bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053be:	e8e3 6702 	strd	r6, r7, [r3], #8
 80053c2:	f108 0801 	add.w	r8, r8, #1
 80053c6:	930a      	str	r3, [sp, #40]	; 0x28
 80053c8:	e7df      	b.n	800538a <__kernel_rem_pio2+0x39a>
 80053ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80053ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80053d2:	f7fb f8c9 	bl	8000568 <__aeabi_dmul>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4630      	mov	r0, r6
 80053dc:	4639      	mov	r1, r7
 80053de:	f7fa ff0d 	bl	80001fc <__adddf3>
 80053e2:	f109 0901 	add.w	r9, r9, #1
 80053e6:	4606      	mov	r6, r0
 80053e8:	460f      	mov	r7, r1
 80053ea:	e7e4      	b.n	80053b6 <__kernel_rem_pio2+0x3c6>
 80053ec:	3d01      	subs	r5, #1
 80053ee:	e748      	b.n	8005282 <__kernel_rem_pio2+0x292>
 80053f0:	ec47 6b10 	vmov	d0, r6, r7
 80053f4:	f1ca 0000 	rsb	r0, sl, #0
 80053f8:	f000 fc96 	bl	8005d28 <scalbn>
 80053fc:	ec57 6b10 	vmov	r6, r7, d0
 8005400:	4ba0      	ldr	r3, [pc, #640]	; (8005684 <__kernel_rem_pio2+0x694>)
 8005402:	ee10 0a10 	vmov	r0, s0
 8005406:	2200      	movs	r2, #0
 8005408:	4639      	mov	r1, r7
 800540a:	f7fb fb33 	bl	8000a74 <__aeabi_dcmpge>
 800540e:	b1f8      	cbz	r0, 8005450 <__kernel_rem_pio2+0x460>
 8005410:	4b9d      	ldr	r3, [pc, #628]	; (8005688 <__kernel_rem_pio2+0x698>)
 8005412:	2200      	movs	r2, #0
 8005414:	4630      	mov	r0, r6
 8005416:	4639      	mov	r1, r7
 8005418:	f7fb f8a6 	bl	8000568 <__aeabi_dmul>
 800541c:	f7fb fb3e 	bl	8000a9c <__aeabi_d2iz>
 8005420:	4680      	mov	r8, r0
 8005422:	f7fb f837 	bl	8000494 <__aeabi_i2d>
 8005426:	4b97      	ldr	r3, [pc, #604]	; (8005684 <__kernel_rem_pio2+0x694>)
 8005428:	2200      	movs	r2, #0
 800542a:	f7fb f89d 	bl	8000568 <__aeabi_dmul>
 800542e:	460b      	mov	r3, r1
 8005430:	4602      	mov	r2, r0
 8005432:	4639      	mov	r1, r7
 8005434:	4630      	mov	r0, r6
 8005436:	f7fa fedf 	bl	80001f8 <__aeabi_dsub>
 800543a:	f7fb fb2f 	bl	8000a9c <__aeabi_d2iz>
 800543e:	1c65      	adds	r5, r4, #1
 8005440:	ab0e      	add	r3, sp, #56	; 0x38
 8005442:	f10a 0a18 	add.w	sl, sl, #24
 8005446:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800544a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800544e:	e720      	b.n	8005292 <__kernel_rem_pio2+0x2a2>
 8005450:	4630      	mov	r0, r6
 8005452:	4639      	mov	r1, r7
 8005454:	f7fb fb22 	bl	8000a9c <__aeabi_d2iz>
 8005458:	ab0e      	add	r3, sp, #56	; 0x38
 800545a:	4625      	mov	r5, r4
 800545c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005460:	e717      	b.n	8005292 <__kernel_rem_pio2+0x2a2>
 8005462:	ab0e      	add	r3, sp, #56	; 0x38
 8005464:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005468:	f7fb f814 	bl	8000494 <__aeabi_i2d>
 800546c:	4632      	mov	r2, r6
 800546e:	463b      	mov	r3, r7
 8005470:	f7fb f87a 	bl	8000568 <__aeabi_dmul>
 8005474:	4b84      	ldr	r3, [pc, #528]	; (8005688 <__kernel_rem_pio2+0x698>)
 8005476:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800547a:	2200      	movs	r2, #0
 800547c:	4630      	mov	r0, r6
 800547e:	4639      	mov	r1, r7
 8005480:	f7fb f872 	bl	8000568 <__aeabi_dmul>
 8005484:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005488:	4606      	mov	r6, r0
 800548a:	460f      	mov	r7, r1
 800548c:	e70f      	b.n	80052ae <__kernel_rem_pio2+0x2be>
 800548e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005492:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005496:	f7fb f867 	bl	8000568 <__aeabi_dmul>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054a2:	f7fa feab 	bl	80001fc <__adddf3>
 80054a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054aa:	f108 0801 	add.w	r8, r8, #1
 80054ae:	9b02      	ldr	r3, [sp, #8]
 80054b0:	4598      	cmp	r8, r3
 80054b2:	dc01      	bgt.n	80054b8 <__kernel_rem_pio2+0x4c8>
 80054b4:	45b8      	cmp	r8, r7
 80054b6:	ddea      	ble.n	800548e <__kernel_rem_pio2+0x49e>
 80054b8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80054bc:	ab4a      	add	r3, sp, #296	; 0x128
 80054be:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80054c2:	ed87 7b00 	vstr	d7, [r7]
 80054c6:	3e01      	subs	r6, #1
 80054c8:	e6f8      	b.n	80052bc <__kernel_rem_pio2+0x2cc>
 80054ca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	dc0b      	bgt.n	80054e8 <__kernel_rem_pio2+0x4f8>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	dc35      	bgt.n	8005540 <__kernel_rem_pio2+0x550>
 80054d4:	d059      	beq.n	800558a <__kernel_rem_pio2+0x59a>
 80054d6:	9b04      	ldr	r3, [sp, #16]
 80054d8:	f003 0007 	and.w	r0, r3, #7
 80054dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80054e0:	ecbd 8b02 	vpop	{d8}
 80054e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d1f3      	bne.n	80054d6 <__kernel_rem_pio2+0x4e6>
 80054ee:	ab4a      	add	r3, sp, #296	; 0x128
 80054f0:	4423      	add	r3, r4
 80054f2:	9306      	str	r3, [sp, #24]
 80054f4:	461c      	mov	r4, r3
 80054f6:	469a      	mov	sl, r3
 80054f8:	9502      	str	r5, [sp, #8]
 80054fa:	9b02      	ldr	r3, [sp, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f1aa 0a08 	sub.w	sl, sl, #8
 8005502:	dc6b      	bgt.n	80055dc <__kernel_rem_pio2+0x5ec>
 8005504:	46aa      	mov	sl, r5
 8005506:	f1ba 0f01 	cmp.w	sl, #1
 800550a:	f1a4 0408 	sub.w	r4, r4, #8
 800550e:	f300 8085 	bgt.w	800561c <__kernel_rem_pio2+0x62c>
 8005512:	9c06      	ldr	r4, [sp, #24]
 8005514:	2000      	movs	r0, #0
 8005516:	3408      	adds	r4, #8
 8005518:	2100      	movs	r1, #0
 800551a:	2d01      	cmp	r5, #1
 800551c:	f300 809d 	bgt.w	800565a <__kernel_rem_pio2+0x66a>
 8005520:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005524:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005528:	f1bb 0f00 	cmp.w	fp, #0
 800552c:	f040 809b 	bne.w	8005666 <__kernel_rem_pio2+0x676>
 8005530:	9b01      	ldr	r3, [sp, #4]
 8005532:	e9c3 5600 	strd	r5, r6, [r3]
 8005536:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800553a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800553e:	e7ca      	b.n	80054d6 <__kernel_rem_pio2+0x4e6>
 8005540:	3408      	adds	r4, #8
 8005542:	ab4a      	add	r3, sp, #296	; 0x128
 8005544:	441c      	add	r4, r3
 8005546:	462e      	mov	r6, r5
 8005548:	2000      	movs	r0, #0
 800554a:	2100      	movs	r1, #0
 800554c:	2e00      	cmp	r6, #0
 800554e:	da36      	bge.n	80055be <__kernel_rem_pio2+0x5ce>
 8005550:	f1bb 0f00 	cmp.w	fp, #0
 8005554:	d039      	beq.n	80055ca <__kernel_rem_pio2+0x5da>
 8005556:	4602      	mov	r2, r0
 8005558:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800555c:	9c01      	ldr	r4, [sp, #4]
 800555e:	e9c4 2300 	strd	r2, r3, [r4]
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800556a:	f7fa fe45 	bl	80001f8 <__aeabi_dsub>
 800556e:	ae4c      	add	r6, sp, #304	; 0x130
 8005570:	2401      	movs	r4, #1
 8005572:	42a5      	cmp	r5, r4
 8005574:	da2c      	bge.n	80055d0 <__kernel_rem_pio2+0x5e0>
 8005576:	f1bb 0f00 	cmp.w	fp, #0
 800557a:	d002      	beq.n	8005582 <__kernel_rem_pio2+0x592>
 800557c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005580:	4619      	mov	r1, r3
 8005582:	9b01      	ldr	r3, [sp, #4]
 8005584:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005588:	e7a5      	b.n	80054d6 <__kernel_rem_pio2+0x4e6>
 800558a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800558e:	eb0d 0403 	add.w	r4, sp, r3
 8005592:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005596:	2000      	movs	r0, #0
 8005598:	2100      	movs	r1, #0
 800559a:	2d00      	cmp	r5, #0
 800559c:	da09      	bge.n	80055b2 <__kernel_rem_pio2+0x5c2>
 800559e:	f1bb 0f00 	cmp.w	fp, #0
 80055a2:	d002      	beq.n	80055aa <__kernel_rem_pio2+0x5ba>
 80055a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055a8:	4619      	mov	r1, r3
 80055aa:	9b01      	ldr	r3, [sp, #4]
 80055ac:	e9c3 0100 	strd	r0, r1, [r3]
 80055b0:	e791      	b.n	80054d6 <__kernel_rem_pio2+0x4e6>
 80055b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80055b6:	f7fa fe21 	bl	80001fc <__adddf3>
 80055ba:	3d01      	subs	r5, #1
 80055bc:	e7ed      	b.n	800559a <__kernel_rem_pio2+0x5aa>
 80055be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80055c2:	f7fa fe1b 	bl	80001fc <__adddf3>
 80055c6:	3e01      	subs	r6, #1
 80055c8:	e7c0      	b.n	800554c <__kernel_rem_pio2+0x55c>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	e7c5      	b.n	800555c <__kernel_rem_pio2+0x56c>
 80055d0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80055d4:	f7fa fe12 	bl	80001fc <__adddf3>
 80055d8:	3401      	adds	r4, #1
 80055da:	e7ca      	b.n	8005572 <__kernel_rem_pio2+0x582>
 80055dc:	e9da 8900 	ldrd	r8, r9, [sl]
 80055e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80055e4:	9b02      	ldr	r3, [sp, #8]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	9302      	str	r3, [sp, #8]
 80055ea:	4632      	mov	r2, r6
 80055ec:	463b      	mov	r3, r7
 80055ee:	4640      	mov	r0, r8
 80055f0:	4649      	mov	r1, r9
 80055f2:	f7fa fe03 	bl	80001fc <__adddf3>
 80055f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4640      	mov	r0, r8
 8005600:	4649      	mov	r1, r9
 8005602:	f7fa fdf9 	bl	80001f8 <__aeabi_dsub>
 8005606:	4632      	mov	r2, r6
 8005608:	463b      	mov	r3, r7
 800560a:	f7fa fdf7 	bl	80001fc <__adddf3>
 800560e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005612:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005616:	ed8a 7b00 	vstr	d7, [sl]
 800561a:	e76e      	b.n	80054fa <__kernel_rem_pio2+0x50a>
 800561c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005620:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005624:	4640      	mov	r0, r8
 8005626:	4632      	mov	r2, r6
 8005628:	463b      	mov	r3, r7
 800562a:	4649      	mov	r1, r9
 800562c:	f7fa fde6 	bl	80001fc <__adddf3>
 8005630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4640      	mov	r0, r8
 800563a:	4649      	mov	r1, r9
 800563c:	f7fa fddc 	bl	80001f8 <__aeabi_dsub>
 8005640:	4632      	mov	r2, r6
 8005642:	463b      	mov	r3, r7
 8005644:	f7fa fdda 	bl	80001fc <__adddf3>
 8005648:	ed9d 7b02 	vldr	d7, [sp, #8]
 800564c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005650:	ed84 7b00 	vstr	d7, [r4]
 8005654:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005658:	e755      	b.n	8005506 <__kernel_rem_pio2+0x516>
 800565a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800565e:	f7fa fdcd 	bl	80001fc <__adddf3>
 8005662:	3d01      	subs	r5, #1
 8005664:	e759      	b.n	800551a <__kernel_rem_pio2+0x52a>
 8005666:	9b01      	ldr	r3, [sp, #4]
 8005668:	9a01      	ldr	r2, [sp, #4]
 800566a:	601d      	str	r5, [r3, #0]
 800566c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005670:	605c      	str	r4, [r3, #4]
 8005672:	609f      	str	r7, [r3, #8]
 8005674:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005678:	60d3      	str	r3, [r2, #12]
 800567a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800567e:	6110      	str	r0, [r2, #16]
 8005680:	6153      	str	r3, [r2, #20]
 8005682:	e728      	b.n	80054d6 <__kernel_rem_pio2+0x4e6>
 8005684:	41700000 	.word	0x41700000
 8005688:	3e700000 	.word	0x3e700000
 800568c:	00000000 	.word	0x00000000

08005690 <__kernel_sin>:
 8005690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	ed2d 8b04 	vpush	{d8-d9}
 8005698:	eeb0 8a41 	vmov.f32	s16, s2
 800569c:	eef0 8a61 	vmov.f32	s17, s3
 80056a0:	ec55 4b10 	vmov	r4, r5, d0
 80056a4:	b083      	sub	sp, #12
 80056a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80056aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80056ae:	9001      	str	r0, [sp, #4]
 80056b0:	da06      	bge.n	80056c0 <__kernel_sin+0x30>
 80056b2:	ee10 0a10 	vmov	r0, s0
 80056b6:	4629      	mov	r1, r5
 80056b8:	f7fb f9f0 	bl	8000a9c <__aeabi_d2iz>
 80056bc:	2800      	cmp	r0, #0
 80056be:	d051      	beq.n	8005764 <__kernel_sin+0xd4>
 80056c0:	4622      	mov	r2, r4
 80056c2:	462b      	mov	r3, r5
 80056c4:	4620      	mov	r0, r4
 80056c6:	4629      	mov	r1, r5
 80056c8:	f7fa ff4e 	bl	8000568 <__aeabi_dmul>
 80056cc:	4682      	mov	sl, r0
 80056ce:	468b      	mov	fp, r1
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4620      	mov	r0, r4
 80056d6:	4629      	mov	r1, r5
 80056d8:	f7fa ff46 	bl	8000568 <__aeabi_dmul>
 80056dc:	a341      	add	r3, pc, #260	; (adr r3, 80057e4 <__kernel_sin+0x154>)
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	4680      	mov	r8, r0
 80056e4:	4689      	mov	r9, r1
 80056e6:	4650      	mov	r0, sl
 80056e8:	4659      	mov	r1, fp
 80056ea:	f7fa ff3d 	bl	8000568 <__aeabi_dmul>
 80056ee:	a33f      	add	r3, pc, #252	; (adr r3, 80057ec <__kernel_sin+0x15c>)
 80056f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f4:	f7fa fd80 	bl	80001f8 <__aeabi_dsub>
 80056f8:	4652      	mov	r2, sl
 80056fa:	465b      	mov	r3, fp
 80056fc:	f7fa ff34 	bl	8000568 <__aeabi_dmul>
 8005700:	a33c      	add	r3, pc, #240	; (adr r3, 80057f4 <__kernel_sin+0x164>)
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	f7fa fd79 	bl	80001fc <__adddf3>
 800570a:	4652      	mov	r2, sl
 800570c:	465b      	mov	r3, fp
 800570e:	f7fa ff2b 	bl	8000568 <__aeabi_dmul>
 8005712:	a33a      	add	r3, pc, #232	; (adr r3, 80057fc <__kernel_sin+0x16c>)
 8005714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005718:	f7fa fd6e 	bl	80001f8 <__aeabi_dsub>
 800571c:	4652      	mov	r2, sl
 800571e:	465b      	mov	r3, fp
 8005720:	f7fa ff22 	bl	8000568 <__aeabi_dmul>
 8005724:	a337      	add	r3, pc, #220	; (adr r3, 8005804 <__kernel_sin+0x174>)
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	f7fa fd67 	bl	80001fc <__adddf3>
 800572e:	9b01      	ldr	r3, [sp, #4]
 8005730:	4606      	mov	r6, r0
 8005732:	460f      	mov	r7, r1
 8005734:	b9eb      	cbnz	r3, 8005772 <__kernel_sin+0xe2>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	4650      	mov	r0, sl
 800573c:	4659      	mov	r1, fp
 800573e:	f7fa ff13 	bl	8000568 <__aeabi_dmul>
 8005742:	a325      	add	r3, pc, #148	; (adr r3, 80057d8 <__kernel_sin+0x148>)
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	f7fa fd56 	bl	80001f8 <__aeabi_dsub>
 800574c:	4642      	mov	r2, r8
 800574e:	464b      	mov	r3, r9
 8005750:	f7fa ff0a 	bl	8000568 <__aeabi_dmul>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4620      	mov	r0, r4
 800575a:	4629      	mov	r1, r5
 800575c:	f7fa fd4e 	bl	80001fc <__adddf3>
 8005760:	4604      	mov	r4, r0
 8005762:	460d      	mov	r5, r1
 8005764:	ec45 4b10 	vmov	d0, r4, r5
 8005768:	b003      	add	sp, #12
 800576a:	ecbd 8b04 	vpop	{d8-d9}
 800576e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005772:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <__kernel_sin+0x150>)
 8005774:	ec51 0b18 	vmov	r0, r1, d8
 8005778:	2200      	movs	r2, #0
 800577a:	f7fa fef5 	bl	8000568 <__aeabi_dmul>
 800577e:	4632      	mov	r2, r6
 8005780:	ec41 0b19 	vmov	d9, r0, r1
 8005784:	463b      	mov	r3, r7
 8005786:	4640      	mov	r0, r8
 8005788:	4649      	mov	r1, r9
 800578a:	f7fa feed 	bl	8000568 <__aeabi_dmul>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	ec51 0b19 	vmov	r0, r1, d9
 8005796:	f7fa fd2f 	bl	80001f8 <__aeabi_dsub>
 800579a:	4652      	mov	r2, sl
 800579c:	465b      	mov	r3, fp
 800579e:	f7fa fee3 	bl	8000568 <__aeabi_dmul>
 80057a2:	ec53 2b18 	vmov	r2, r3, d8
 80057a6:	f7fa fd27 	bl	80001f8 <__aeabi_dsub>
 80057aa:	a30b      	add	r3, pc, #44	; (adr r3, 80057d8 <__kernel_sin+0x148>)
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	4606      	mov	r6, r0
 80057b2:	460f      	mov	r7, r1
 80057b4:	4640      	mov	r0, r8
 80057b6:	4649      	mov	r1, r9
 80057b8:	f7fa fed6 	bl	8000568 <__aeabi_dmul>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4630      	mov	r0, r6
 80057c2:	4639      	mov	r1, r7
 80057c4:	f7fa fd1a 	bl	80001fc <__adddf3>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4620      	mov	r0, r4
 80057ce:	4629      	mov	r1, r5
 80057d0:	f7fa fd12 	bl	80001f8 <__aeabi_dsub>
 80057d4:	e7c4      	b.n	8005760 <__kernel_sin+0xd0>
 80057d6:	bf00      	nop
 80057d8:	55555549 	.word	0x55555549
 80057dc:	3fc55555 	.word	0x3fc55555
 80057e0:	3fe00000 	.word	0x3fe00000
 80057e4:	5acfd57c 	.word	0x5acfd57c
 80057e8:	3de5d93a 	.word	0x3de5d93a
 80057ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80057f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80057f4:	57b1fe7d 	.word	0x57b1fe7d
 80057f8:	3ec71de3 	.word	0x3ec71de3
 80057fc:	19c161d5 	.word	0x19c161d5
 8005800:	3f2a01a0 	.word	0x3f2a01a0
 8005804:	1110f8a6 	.word	0x1110f8a6
 8005808:	3f811111 	.word	0x3f811111
 800580c:	00000000 	.word	0x00000000

08005810 <__kernel_tan>:
 8005810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005814:	ed2d 8b06 	vpush	{d8-d10}
 8005818:	ec5b ab10 	vmov	sl, fp, d0
 800581c:	4be0      	ldr	r3, [pc, #896]	; (8005ba0 <__kernel_tan+0x390>)
 800581e:	b083      	sub	sp, #12
 8005820:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8005824:	429f      	cmp	r7, r3
 8005826:	ec59 8b11 	vmov	r8, r9, d1
 800582a:	4606      	mov	r6, r0
 800582c:	f8cd b000 	str.w	fp, [sp]
 8005830:	dc61      	bgt.n	80058f6 <__kernel_tan+0xe6>
 8005832:	ee10 0a10 	vmov	r0, s0
 8005836:	4659      	mov	r1, fp
 8005838:	f7fb f930 	bl	8000a9c <__aeabi_d2iz>
 800583c:	4605      	mov	r5, r0
 800583e:	2800      	cmp	r0, #0
 8005840:	f040 8083 	bne.w	800594a <__kernel_tan+0x13a>
 8005844:	1c73      	adds	r3, r6, #1
 8005846:	4652      	mov	r2, sl
 8005848:	4313      	orrs	r3, r2
 800584a:	433b      	orrs	r3, r7
 800584c:	d112      	bne.n	8005874 <__kernel_tan+0x64>
 800584e:	ec4b ab10 	vmov	d0, sl, fp
 8005852:	f7ff f861 	bl	8004918 <fabs>
 8005856:	49d3      	ldr	r1, [pc, #844]	; (8005ba4 <__kernel_tan+0x394>)
 8005858:	ec53 2b10 	vmov	r2, r3, d0
 800585c:	2000      	movs	r0, #0
 800585e:	f7fa ffad 	bl	80007bc <__aeabi_ddiv>
 8005862:	4682      	mov	sl, r0
 8005864:	468b      	mov	fp, r1
 8005866:	ec4b ab10 	vmov	d0, sl, fp
 800586a:	b003      	add	sp, #12
 800586c:	ecbd 8b06 	vpop	{d8-d10}
 8005870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005874:	2e01      	cmp	r6, #1
 8005876:	d0f6      	beq.n	8005866 <__kernel_tan+0x56>
 8005878:	4642      	mov	r2, r8
 800587a:	464b      	mov	r3, r9
 800587c:	4650      	mov	r0, sl
 800587e:	4659      	mov	r1, fp
 8005880:	f7fa fcbc 	bl	80001fc <__adddf3>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	460f      	mov	r7, r1
 800588a:	2000      	movs	r0, #0
 800588c:	49c6      	ldr	r1, [pc, #792]	; (8005ba8 <__kernel_tan+0x398>)
 800588e:	f7fa ff95 	bl	80007bc <__aeabi_ddiv>
 8005892:	e9cd 0100 	strd	r0, r1, [sp]
 8005896:	e9dd 2300 	ldrd	r2, r3, [sp]
 800589a:	462e      	mov	r6, r5
 800589c:	4652      	mov	r2, sl
 800589e:	462c      	mov	r4, r5
 80058a0:	4630      	mov	r0, r6
 80058a2:	461d      	mov	r5, r3
 80058a4:	4639      	mov	r1, r7
 80058a6:	465b      	mov	r3, fp
 80058a8:	f7fa fca6 	bl	80001f8 <__aeabi_dsub>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4640      	mov	r0, r8
 80058b2:	4649      	mov	r1, r9
 80058b4:	f7fa fca0 	bl	80001f8 <__aeabi_dsub>
 80058b8:	4632      	mov	r2, r6
 80058ba:	462b      	mov	r3, r5
 80058bc:	f7fa fe54 	bl	8000568 <__aeabi_dmul>
 80058c0:	4632      	mov	r2, r6
 80058c2:	4680      	mov	r8, r0
 80058c4:	4689      	mov	r9, r1
 80058c6:	462b      	mov	r3, r5
 80058c8:	4630      	mov	r0, r6
 80058ca:	4639      	mov	r1, r7
 80058cc:	f7fa fe4c 	bl	8000568 <__aeabi_dmul>
 80058d0:	4bb4      	ldr	r3, [pc, #720]	; (8005ba4 <__kernel_tan+0x394>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	f7fa fc92 	bl	80001fc <__adddf3>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4640      	mov	r0, r8
 80058de:	4649      	mov	r1, r9
 80058e0:	f7fa fc8c 	bl	80001fc <__adddf3>
 80058e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058e8:	f7fa fe3e 	bl	8000568 <__aeabi_dmul>
 80058ec:	4622      	mov	r2, r4
 80058ee:	462b      	mov	r3, r5
 80058f0:	f7fa fc84 	bl	80001fc <__adddf3>
 80058f4:	e7b5      	b.n	8005862 <__kernel_tan+0x52>
 80058f6:	4bad      	ldr	r3, [pc, #692]	; (8005bac <__kernel_tan+0x39c>)
 80058f8:	429f      	cmp	r7, r3
 80058fa:	dd26      	ble.n	800594a <__kernel_tan+0x13a>
 80058fc:	9b00      	ldr	r3, [sp, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	da09      	bge.n	8005916 <__kernel_tan+0x106>
 8005902:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005906:	469b      	mov	fp, r3
 8005908:	ee10 aa10 	vmov	sl, s0
 800590c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005910:	ee11 8a10 	vmov	r8, s2
 8005914:	4699      	mov	r9, r3
 8005916:	4652      	mov	r2, sl
 8005918:	465b      	mov	r3, fp
 800591a:	a183      	add	r1, pc, #524	; (adr r1, 8005b28 <__kernel_tan+0x318>)
 800591c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005920:	f7fa fc6a 	bl	80001f8 <__aeabi_dsub>
 8005924:	4642      	mov	r2, r8
 8005926:	464b      	mov	r3, r9
 8005928:	4604      	mov	r4, r0
 800592a:	460d      	mov	r5, r1
 800592c:	a180      	add	r1, pc, #512	; (adr r1, 8005b30 <__kernel_tan+0x320>)
 800592e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005932:	f7fa fc61 	bl	80001f8 <__aeabi_dsub>
 8005936:	4622      	mov	r2, r4
 8005938:	462b      	mov	r3, r5
 800593a:	f7fa fc5f 	bl	80001fc <__adddf3>
 800593e:	f04f 0800 	mov.w	r8, #0
 8005942:	4682      	mov	sl, r0
 8005944:	468b      	mov	fp, r1
 8005946:	f04f 0900 	mov.w	r9, #0
 800594a:	4652      	mov	r2, sl
 800594c:	465b      	mov	r3, fp
 800594e:	4650      	mov	r0, sl
 8005950:	4659      	mov	r1, fp
 8005952:	f7fa fe09 	bl	8000568 <__aeabi_dmul>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	ec43 2b18 	vmov	d8, r2, r3
 800595e:	f7fa fe03 	bl	8000568 <__aeabi_dmul>
 8005962:	ec53 2b18 	vmov	r2, r3, d8
 8005966:	4604      	mov	r4, r0
 8005968:	460d      	mov	r5, r1
 800596a:	4650      	mov	r0, sl
 800596c:	4659      	mov	r1, fp
 800596e:	f7fa fdfb 	bl	8000568 <__aeabi_dmul>
 8005972:	a371      	add	r3, pc, #452	; (adr r3, 8005b38 <__kernel_tan+0x328>)
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	ec41 0b19 	vmov	d9, r0, r1
 800597c:	4620      	mov	r0, r4
 800597e:	4629      	mov	r1, r5
 8005980:	f7fa fdf2 	bl	8000568 <__aeabi_dmul>
 8005984:	a36e      	add	r3, pc, #440	; (adr r3, 8005b40 <__kernel_tan+0x330>)
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f7fa fc37 	bl	80001fc <__adddf3>
 800598e:	4622      	mov	r2, r4
 8005990:	462b      	mov	r3, r5
 8005992:	f7fa fde9 	bl	8000568 <__aeabi_dmul>
 8005996:	a36c      	add	r3, pc, #432	; (adr r3, 8005b48 <__kernel_tan+0x338>)
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	f7fa fc2e 	bl	80001fc <__adddf3>
 80059a0:	4622      	mov	r2, r4
 80059a2:	462b      	mov	r3, r5
 80059a4:	f7fa fde0 	bl	8000568 <__aeabi_dmul>
 80059a8:	a369      	add	r3, pc, #420	; (adr r3, 8005b50 <__kernel_tan+0x340>)
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	f7fa fc25 	bl	80001fc <__adddf3>
 80059b2:	4622      	mov	r2, r4
 80059b4:	462b      	mov	r3, r5
 80059b6:	f7fa fdd7 	bl	8000568 <__aeabi_dmul>
 80059ba:	a367      	add	r3, pc, #412	; (adr r3, 8005b58 <__kernel_tan+0x348>)
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	f7fa fc1c 	bl	80001fc <__adddf3>
 80059c4:	4622      	mov	r2, r4
 80059c6:	462b      	mov	r3, r5
 80059c8:	f7fa fdce 	bl	8000568 <__aeabi_dmul>
 80059cc:	a364      	add	r3, pc, #400	; (adr r3, 8005b60 <__kernel_tan+0x350>)
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	f7fa fc13 	bl	80001fc <__adddf3>
 80059d6:	ec53 2b18 	vmov	r2, r3, d8
 80059da:	f7fa fdc5 	bl	8000568 <__aeabi_dmul>
 80059de:	a362      	add	r3, pc, #392	; (adr r3, 8005b68 <__kernel_tan+0x358>)
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	ec41 0b1a 	vmov	d10, r0, r1
 80059e8:	4620      	mov	r0, r4
 80059ea:	4629      	mov	r1, r5
 80059ec:	f7fa fdbc 	bl	8000568 <__aeabi_dmul>
 80059f0:	a35f      	add	r3, pc, #380	; (adr r3, 8005b70 <__kernel_tan+0x360>)
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f7fa fc01 	bl	80001fc <__adddf3>
 80059fa:	4622      	mov	r2, r4
 80059fc:	462b      	mov	r3, r5
 80059fe:	f7fa fdb3 	bl	8000568 <__aeabi_dmul>
 8005a02:	a35d      	add	r3, pc, #372	; (adr r3, 8005b78 <__kernel_tan+0x368>)
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	f7fa fbf8 	bl	80001fc <__adddf3>
 8005a0c:	4622      	mov	r2, r4
 8005a0e:	462b      	mov	r3, r5
 8005a10:	f7fa fdaa 	bl	8000568 <__aeabi_dmul>
 8005a14:	a35a      	add	r3, pc, #360	; (adr r3, 8005b80 <__kernel_tan+0x370>)
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	f7fa fbef 	bl	80001fc <__adddf3>
 8005a1e:	4622      	mov	r2, r4
 8005a20:	462b      	mov	r3, r5
 8005a22:	f7fa fda1 	bl	8000568 <__aeabi_dmul>
 8005a26:	a358      	add	r3, pc, #352	; (adr r3, 8005b88 <__kernel_tan+0x378>)
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f7fa fbe6 	bl	80001fc <__adddf3>
 8005a30:	4622      	mov	r2, r4
 8005a32:	462b      	mov	r3, r5
 8005a34:	f7fa fd98 	bl	8000568 <__aeabi_dmul>
 8005a38:	a355      	add	r3, pc, #340	; (adr r3, 8005b90 <__kernel_tan+0x380>)
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f7fa fbdd 	bl	80001fc <__adddf3>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	ec51 0b1a 	vmov	r0, r1, d10
 8005a4a:	f7fa fbd7 	bl	80001fc <__adddf3>
 8005a4e:	ec53 2b19 	vmov	r2, r3, d9
 8005a52:	f7fa fd89 	bl	8000568 <__aeabi_dmul>
 8005a56:	4642      	mov	r2, r8
 8005a58:	464b      	mov	r3, r9
 8005a5a:	f7fa fbcf 	bl	80001fc <__adddf3>
 8005a5e:	ec53 2b18 	vmov	r2, r3, d8
 8005a62:	f7fa fd81 	bl	8000568 <__aeabi_dmul>
 8005a66:	4642      	mov	r2, r8
 8005a68:	464b      	mov	r3, r9
 8005a6a:	f7fa fbc7 	bl	80001fc <__adddf3>
 8005a6e:	a34a      	add	r3, pc, #296	; (adr r3, 8005b98 <__kernel_tan+0x388>)
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	4604      	mov	r4, r0
 8005a76:	460d      	mov	r5, r1
 8005a78:	ec51 0b19 	vmov	r0, r1, d9
 8005a7c:	f7fa fd74 	bl	8000568 <__aeabi_dmul>
 8005a80:	4622      	mov	r2, r4
 8005a82:	462b      	mov	r3, r5
 8005a84:	f7fa fbba 	bl	80001fc <__adddf3>
 8005a88:	460b      	mov	r3, r1
 8005a8a:	ec41 0b18 	vmov	d8, r0, r1
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4659      	mov	r1, fp
 8005a92:	4650      	mov	r0, sl
 8005a94:	f7fa fbb2 	bl	80001fc <__adddf3>
 8005a98:	4b44      	ldr	r3, [pc, #272]	; (8005bac <__kernel_tan+0x39c>)
 8005a9a:	429f      	cmp	r7, r3
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	460d      	mov	r5, r1
 8005aa0:	f340 8086 	ble.w	8005bb0 <__kernel_tan+0x3a0>
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f7fa fcf5 	bl	8000494 <__aeabi_i2d>
 8005aaa:	4622      	mov	r2, r4
 8005aac:	4680      	mov	r8, r0
 8005aae:	4689      	mov	r9, r1
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	f7fa fd57 	bl	8000568 <__aeabi_dmul>
 8005aba:	4642      	mov	r2, r8
 8005abc:	4606      	mov	r6, r0
 8005abe:	460f      	mov	r7, r1
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	f7fa fb99 	bl	80001fc <__adddf3>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	4630      	mov	r0, r6
 8005ad0:	4639      	mov	r1, r7
 8005ad2:	f7fa fe73 	bl	80007bc <__aeabi_ddiv>
 8005ad6:	ec53 2b18 	vmov	r2, r3, d8
 8005ada:	f7fa fb8d 	bl	80001f8 <__aeabi_dsub>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4650      	mov	r0, sl
 8005ae4:	4659      	mov	r1, fp
 8005ae6:	f7fa fb87 	bl	80001f8 <__aeabi_dsub>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	f7fa fb85 	bl	80001fc <__adddf3>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4640      	mov	r0, r8
 8005af8:	4649      	mov	r1, r9
 8005afa:	f7fa fb7d 	bl	80001f8 <__aeabi_dsub>
 8005afe:	9b00      	ldr	r3, [sp, #0]
 8005b00:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8005b04:	f00a 0a02 	and.w	sl, sl, #2
 8005b08:	4604      	mov	r4, r0
 8005b0a:	f1ca 0001 	rsb	r0, sl, #1
 8005b0e:	460d      	mov	r5, r1
 8005b10:	f7fa fcc0 	bl	8000494 <__aeabi_i2d>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4620      	mov	r0, r4
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	f7fa fd24 	bl	8000568 <__aeabi_dmul>
 8005b20:	e69f      	b.n	8005862 <__kernel_tan+0x52>
 8005b22:	bf00      	nop
 8005b24:	f3af 8000 	nop.w
 8005b28:	54442d18 	.word	0x54442d18
 8005b2c:	3fe921fb 	.word	0x3fe921fb
 8005b30:	33145c07 	.word	0x33145c07
 8005b34:	3c81a626 	.word	0x3c81a626
 8005b38:	74bf7ad4 	.word	0x74bf7ad4
 8005b3c:	3efb2a70 	.word	0x3efb2a70
 8005b40:	32f0a7e9 	.word	0x32f0a7e9
 8005b44:	3f12b80f 	.word	0x3f12b80f
 8005b48:	1a8d1068 	.word	0x1a8d1068
 8005b4c:	3f3026f7 	.word	0x3f3026f7
 8005b50:	fee08315 	.word	0xfee08315
 8005b54:	3f57dbc8 	.word	0x3f57dbc8
 8005b58:	e96e8493 	.word	0xe96e8493
 8005b5c:	3f8226e3 	.word	0x3f8226e3
 8005b60:	1bb341fe 	.word	0x1bb341fe
 8005b64:	3faba1ba 	.word	0x3faba1ba
 8005b68:	db605373 	.word	0xdb605373
 8005b6c:	bef375cb 	.word	0xbef375cb
 8005b70:	a03792a6 	.word	0xa03792a6
 8005b74:	3f147e88 	.word	0x3f147e88
 8005b78:	f2f26501 	.word	0xf2f26501
 8005b7c:	3f4344d8 	.word	0x3f4344d8
 8005b80:	c9560328 	.word	0xc9560328
 8005b84:	3f6d6d22 	.word	0x3f6d6d22
 8005b88:	8406d637 	.word	0x8406d637
 8005b8c:	3f9664f4 	.word	0x3f9664f4
 8005b90:	1110fe7a 	.word	0x1110fe7a
 8005b94:	3fc11111 	.word	0x3fc11111
 8005b98:	55555563 	.word	0x55555563
 8005b9c:	3fd55555 	.word	0x3fd55555
 8005ba0:	3e2fffff 	.word	0x3e2fffff
 8005ba4:	3ff00000 	.word	0x3ff00000
 8005ba8:	bff00000 	.word	0xbff00000
 8005bac:	3fe59427 	.word	0x3fe59427
 8005bb0:	2e01      	cmp	r6, #1
 8005bb2:	d02f      	beq.n	8005c14 <__kernel_tan+0x404>
 8005bb4:	460f      	mov	r7, r1
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4689      	mov	r9, r1
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	4917      	ldr	r1, [pc, #92]	; (8005c1c <__kernel_tan+0x40c>)
 8005bc0:	f7fa fdfc 	bl	80007bc <__aeabi_ddiv>
 8005bc4:	2600      	movs	r6, #0
 8005bc6:	e9cd 0100 	strd	r0, r1, [sp]
 8005bca:	4652      	mov	r2, sl
 8005bcc:	465b      	mov	r3, fp
 8005bce:	4630      	mov	r0, r6
 8005bd0:	4639      	mov	r1, r7
 8005bd2:	f7fa fb11 	bl	80001f8 <__aeabi_dsub>
 8005bd6:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	ec51 0b18 	vmov	r0, r1, d8
 8005be2:	f7fa fb09 	bl	80001f8 <__aeabi_dsub>
 8005be6:	4632      	mov	r2, r6
 8005be8:	462b      	mov	r3, r5
 8005bea:	f7fa fcbd 	bl	8000568 <__aeabi_dmul>
 8005bee:	46b0      	mov	r8, r6
 8005bf0:	460f      	mov	r7, r1
 8005bf2:	4642      	mov	r2, r8
 8005bf4:	462b      	mov	r3, r5
 8005bf6:	4634      	mov	r4, r6
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	f7fa fcb3 	bl	8000568 <__aeabi_dmul>
 8005c02:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <__kernel_tan+0x410>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	f7fa faf9 	bl	80001fc <__adddf3>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4630      	mov	r0, r6
 8005c10:	4639      	mov	r1, r7
 8005c12:	e665      	b.n	80058e0 <__kernel_tan+0xd0>
 8005c14:	4682      	mov	sl, r0
 8005c16:	468b      	mov	fp, r1
 8005c18:	e625      	b.n	8005866 <__kernel_tan+0x56>
 8005c1a:	bf00      	nop
 8005c1c:	bff00000 	.word	0xbff00000
 8005c20:	3ff00000 	.word	0x3ff00000
 8005c24:	00000000 	.word	0x00000000

08005c28 <floor>:
 8005c28:	ec51 0b10 	vmov	r0, r1, d0
 8005c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c30:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005c34:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005c38:	2e13      	cmp	r6, #19
 8005c3a:	ee10 5a10 	vmov	r5, s0
 8005c3e:	ee10 8a10 	vmov	r8, s0
 8005c42:	460c      	mov	r4, r1
 8005c44:	dc32      	bgt.n	8005cac <floor+0x84>
 8005c46:	2e00      	cmp	r6, #0
 8005c48:	da14      	bge.n	8005c74 <floor+0x4c>
 8005c4a:	a333      	add	r3, pc, #204	; (adr r3, 8005d18 <floor+0xf0>)
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f7fa fad4 	bl	80001fc <__adddf3>
 8005c54:	2200      	movs	r2, #0
 8005c56:	2300      	movs	r3, #0
 8005c58:	f7fa ff16 	bl	8000a88 <__aeabi_dcmpgt>
 8005c5c:	b138      	cbz	r0, 8005c6e <floor+0x46>
 8005c5e:	2c00      	cmp	r4, #0
 8005c60:	da57      	bge.n	8005d12 <floor+0xea>
 8005c62:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005c66:	431d      	orrs	r5, r3
 8005c68:	d001      	beq.n	8005c6e <floor+0x46>
 8005c6a:	4c2d      	ldr	r4, [pc, #180]	; (8005d20 <floor+0xf8>)
 8005c6c:	2500      	movs	r5, #0
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	e025      	b.n	8005cc0 <floor+0x98>
 8005c74:	4f2b      	ldr	r7, [pc, #172]	; (8005d24 <floor+0xfc>)
 8005c76:	4137      	asrs	r7, r6
 8005c78:	ea01 0307 	and.w	r3, r1, r7
 8005c7c:	4303      	orrs	r3, r0
 8005c7e:	d01f      	beq.n	8005cc0 <floor+0x98>
 8005c80:	a325      	add	r3, pc, #148	; (adr r3, 8005d18 <floor+0xf0>)
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	f7fa fab9 	bl	80001fc <__adddf3>
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f7fa fefb 	bl	8000a88 <__aeabi_dcmpgt>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d0eb      	beq.n	8005c6e <floor+0x46>
 8005c96:	2c00      	cmp	r4, #0
 8005c98:	bfbe      	ittt	lt
 8005c9a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005c9e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005ca2:	19a4      	addlt	r4, r4, r6
 8005ca4:	ea24 0407 	bic.w	r4, r4, r7
 8005ca8:	2500      	movs	r5, #0
 8005caa:	e7e0      	b.n	8005c6e <floor+0x46>
 8005cac:	2e33      	cmp	r6, #51	; 0x33
 8005cae:	dd0b      	ble.n	8005cc8 <floor+0xa0>
 8005cb0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005cb4:	d104      	bne.n	8005cc0 <floor+0x98>
 8005cb6:	ee10 2a10 	vmov	r2, s0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	f7fa fa9e 	bl	80001fc <__adddf3>
 8005cc0:	ec41 0b10 	vmov	d0, r0, r1
 8005cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	fa23 f707 	lsr.w	r7, r3, r7
 8005cd4:	4207      	tst	r7, r0
 8005cd6:	d0f3      	beq.n	8005cc0 <floor+0x98>
 8005cd8:	a30f      	add	r3, pc, #60	; (adr r3, 8005d18 <floor+0xf0>)
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f7fa fa8d 	bl	80001fc <__adddf3>
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f7fa fecf 	bl	8000a88 <__aeabi_dcmpgt>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d0bf      	beq.n	8005c6e <floor+0x46>
 8005cee:	2c00      	cmp	r4, #0
 8005cf0:	da02      	bge.n	8005cf8 <floor+0xd0>
 8005cf2:	2e14      	cmp	r6, #20
 8005cf4:	d103      	bne.n	8005cfe <floor+0xd6>
 8005cf6:	3401      	adds	r4, #1
 8005cf8:	ea25 0507 	bic.w	r5, r5, r7
 8005cfc:	e7b7      	b.n	8005c6e <floor+0x46>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005d04:	fa03 f606 	lsl.w	r6, r3, r6
 8005d08:	4435      	add	r5, r6
 8005d0a:	4545      	cmp	r5, r8
 8005d0c:	bf38      	it	cc
 8005d0e:	18e4      	addcc	r4, r4, r3
 8005d10:	e7f2      	b.n	8005cf8 <floor+0xd0>
 8005d12:	2500      	movs	r5, #0
 8005d14:	462c      	mov	r4, r5
 8005d16:	e7aa      	b.n	8005c6e <floor+0x46>
 8005d18:	8800759c 	.word	0x8800759c
 8005d1c:	7e37e43c 	.word	0x7e37e43c
 8005d20:	bff00000 	.word	0xbff00000
 8005d24:	000fffff 	.word	0x000fffff

08005d28 <scalbn>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	ec55 4b10 	vmov	r4, r5, d0
 8005d2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005d32:	4606      	mov	r6, r0
 8005d34:	462b      	mov	r3, r5
 8005d36:	b99a      	cbnz	r2, 8005d60 <scalbn+0x38>
 8005d38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d3c:	4323      	orrs	r3, r4
 8005d3e:	d036      	beq.n	8005dae <scalbn+0x86>
 8005d40:	4b39      	ldr	r3, [pc, #228]	; (8005e28 <scalbn+0x100>)
 8005d42:	4629      	mov	r1, r5
 8005d44:	ee10 0a10 	vmov	r0, s0
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f7fa fc0d 	bl	8000568 <__aeabi_dmul>
 8005d4e:	4b37      	ldr	r3, [pc, #220]	; (8005e2c <scalbn+0x104>)
 8005d50:	429e      	cmp	r6, r3
 8005d52:	4604      	mov	r4, r0
 8005d54:	460d      	mov	r5, r1
 8005d56:	da10      	bge.n	8005d7a <scalbn+0x52>
 8005d58:	a32b      	add	r3, pc, #172	; (adr r3, 8005e08 <scalbn+0xe0>)
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	e03a      	b.n	8005dd6 <scalbn+0xae>
 8005d60:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005d64:	428a      	cmp	r2, r1
 8005d66:	d10c      	bne.n	8005d82 <scalbn+0x5a>
 8005d68:	ee10 2a10 	vmov	r2, s0
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	4629      	mov	r1, r5
 8005d70:	f7fa fa44 	bl	80001fc <__adddf3>
 8005d74:	4604      	mov	r4, r0
 8005d76:	460d      	mov	r5, r1
 8005d78:	e019      	b.n	8005dae <scalbn+0x86>
 8005d7a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d7e:	460b      	mov	r3, r1
 8005d80:	3a36      	subs	r2, #54	; 0x36
 8005d82:	4432      	add	r2, r6
 8005d84:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005d88:	428a      	cmp	r2, r1
 8005d8a:	dd08      	ble.n	8005d9e <scalbn+0x76>
 8005d8c:	2d00      	cmp	r5, #0
 8005d8e:	a120      	add	r1, pc, #128	; (adr r1, 8005e10 <scalbn+0xe8>)
 8005d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d94:	da1c      	bge.n	8005dd0 <scalbn+0xa8>
 8005d96:	a120      	add	r1, pc, #128	; (adr r1, 8005e18 <scalbn+0xf0>)
 8005d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d9c:	e018      	b.n	8005dd0 <scalbn+0xa8>
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	dd08      	ble.n	8005db4 <scalbn+0x8c>
 8005da2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005da6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005daa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005dae:	ec45 4b10 	vmov	d0, r4, r5
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005db8:	da19      	bge.n	8005dee <scalbn+0xc6>
 8005dba:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005dbe:	429e      	cmp	r6, r3
 8005dc0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005dc4:	dd0a      	ble.n	8005ddc <scalbn+0xb4>
 8005dc6:	a112      	add	r1, pc, #72	; (adr r1, 8005e10 <scalbn+0xe8>)
 8005dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e2      	bne.n	8005d96 <scalbn+0x6e>
 8005dd0:	a30f      	add	r3, pc, #60	; (adr r3, 8005e10 <scalbn+0xe8>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f7fa fbc7 	bl	8000568 <__aeabi_dmul>
 8005dda:	e7cb      	b.n	8005d74 <scalbn+0x4c>
 8005ddc:	a10a      	add	r1, pc, #40	; (adr r1, 8005e08 <scalbn+0xe0>)
 8005dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0b8      	beq.n	8005d58 <scalbn+0x30>
 8005de6:	a10e      	add	r1, pc, #56	; (adr r1, 8005e20 <scalbn+0xf8>)
 8005de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dec:	e7b4      	b.n	8005d58 <scalbn+0x30>
 8005dee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005df2:	3236      	adds	r2, #54	; 0x36
 8005df4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005df8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <scalbn+0x108>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	e7e8      	b.n	8005dd6 <scalbn+0xae>
 8005e04:	f3af 8000 	nop.w
 8005e08:	c2f8f359 	.word	0xc2f8f359
 8005e0c:	01a56e1f 	.word	0x01a56e1f
 8005e10:	8800759c 	.word	0x8800759c
 8005e14:	7e37e43c 	.word	0x7e37e43c
 8005e18:	8800759c 	.word	0x8800759c
 8005e1c:	fe37e43c 	.word	0xfe37e43c
 8005e20:	c2f8f359 	.word	0xc2f8f359
 8005e24:	81a56e1f 	.word	0x81a56e1f
 8005e28:	43500000 	.word	0x43500000
 8005e2c:	ffff3cb0 	.word	0xffff3cb0
 8005e30:	3c900000 	.word	0x3c900000

08005e34 <_init>:
 8005e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e36:	bf00      	nop
 8005e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3a:	bc08      	pop	{r3}
 8005e3c:	469e      	mov	lr, r3
 8005e3e:	4770      	bx	lr

08005e40 <_fini>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	bf00      	nop
 8005e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e46:	bc08      	pop	{r3}
 8005e48:	469e      	mov	lr, r3
 8005e4a:	4770      	bx	lr
